{"version":3,"sources":["assets/images/logo.png","api/ajax.js","api/index.js","utils/memoryUtils.js","utils/storageUtils.js","pages/login/login.jsx","config/menuConfig.js","components/left-nav/index.jsx","utils/dateUtils.js","components/header/index.jsx","pages/home/home.jsx","pages/calendar/event-form.jsx","pages/calendar/calendar.jsx","utils/constants.js","pages/member/index.jsx","pages/member/details.jsx","pages/member/member.jsx","pages/memberManagement/index.jsx","pages/memberManagement/picturesWall.jsx","pages/memberManagement/rich-text-editor.jsx","pages/memberManagement/operations.jsx","utils/urlUtils.js","pages/memberManagement/details.jsx","pages/memberManagement/memberManagement.jsx","pages/roleManagement/add-form.jsx","pages/roleManagement/auth-form.jsx","pages/roleManagement/roleManagement.jsx","pages/userManagement/user-form.jsx","pages/userManagement/userManagement.jsx","pages/admin/admin.jsx","App.js","index.js"],"names":["ajax","url","data","type","Promise","resolve","reject","axios","get","params","post","then","response","catch","error","message","username","password","notes","reqLogin","BASE","reqAddOrUpdateUser","user","_id","reqMembers","pageNum","pageSize","reqSearchMembers","searchName","searchType","reqDeleteImg","name","reqAddOrUpdateMember","member","reqDeleteMember","reqAddRole","roleName","reqSetRolePermissions","role","reqDeleteRole","reqUsers","reqDeleteUser","userId","reqEvents","reqAddEvent","events","USER_KEY","store","set","remove","Login","history","useHistory","Form","useForm","form","memoryUtils","to","className","src","logo","alt","onFinish","values","validateFields","a","result","status","success","storageUtils","replace","msg","errorInfo","console","log","Item","rules","required","min","max","pattern","prefix","UserOutlined","placeholder","validator","_","value","length","test","LockOutlined","htmlType","menuList","title","key","icon","HomeOutlined","route","isPublic","ScheduleOutlined","TeamOutlined","BarsOutlined","children","SubMenu","Menu","LeftNav","hasAuth","item","menus","indexOf","find","child","getMenuNodes","path","props","location","pathname","reduce","pre","cItem","openKey","push","this","menuNodes","defaultOpenKeys","selectedKeys","mode","theme","Component","withRouter","formatDate","time","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Header","state","currentTime","now","getTime","intervalId","setInterval","setState","getTitle","forEach","logout","Modal","confirm","ExclamationCircleOutlined","onOk","clearInterval","onClick","LogoutOutlined","Home","List","EventForm","formRef","React","createRef","setForm","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","ref","fields","add","errors","map","field","index","label","validateTrigger","whitespace","noStyle","style","width","MinusCircleOutlined","PlusOutlined","ErrorList","TeamCalendar","moment","selectedValue","isShownEventForm","allEvents","onSelect","onPanelChange","addEvent","current","resetFields","eventsToAdd","eventList","getEvents","format","disabled","isAbleToEditCalendar","dateCellRender","listData","year","month","i","content","getListData","color","Math","random","toString","substr","text","visible","onCancel","BASE_IMAGE_URL","Meta","Card","Members","total","members","getMembers","loading","list","minValue","maxValue","slice","hoverable","cover","photo","defaultCurrent","defaultPageSize","onChange","Details","details","ArrowLeftOutlined","marginRight","fontSize","goBack","img","dangerouslySetInnerHTML","__html","Member","exact","component","Option","Select","MembersList","initColumns","columns","dataIndex","align","render","JSON","stringify","onConfirm","okText","cancelText","SearchOutlined","margin","event","target","extra","dataSource","rowKey","bordered","pagination","showQuickJumper","getBase64","file","reader","FileReader","readAsDataURL","onload","onerror","PicturesWall","previewVisible","previewImage","previewTitle","fileList","getImages","handleCancel","handlePreview","preview","originFileObj","substring","lastIndexOf","handleChange","uid","uploadButton","marginTop","action","accept","listType","onPreview","footer","RichTextEditor","editorState","EditorState","createEmpty","onEditorStateChange","getDetails","draftToHtml","convertToRaw","getCurrentContent","uploadImageCallBack","xhr","XMLHttpRequest","open","FormData","append","send","addEventListener","parse","responseText","link","html","contentBlock","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","createWithContent","editorStyle","border","minHeight","paddingLeft","toolbar","image","uploadCallback","present","mandatory","Operations","useState","setValue","pw","useRef","editor","member_","reg","RegExp","r","window","search","match","unescape","getQuery","isUpdate","nickname","position","gender","nationality","phone","address","dob","initialValue","Group","e","MemberManagement","AddForm","TreeNode","Tree","Auth","getMenus","checkedKeys","getTreeNodes","onCheck","treeNodes","nextProps","checkable","defaultExpandAll","RoleManagement","roles","isShownAdd","isShownAuth","initColumn","getRoles","onRow","addRole","setRolePermissons","auth","auth_time","auth_name","role_id","info","rowSelection","selectedRowKeys","UserForm","PureComponent","UserManagement","users","isShown","roleNames","deleteUser","initRoleNames","addOrUpdateUser","getFieldsValue","getUsers","destroyOnClose","Footer","Layout","Sider","Content","Admin","zIndex","minWidth","backgroundColor","Calendar","textAlign","App","ReactDOM","document","getElementById"],"mappings":"2bAAe,G,OAAA,IAA0B,kC,kBCS1B,SAASA,EAAKC,GAA2B,IAAtBC,EAAqB,uDAAhB,GAAIC,EAAY,uDAAP,MAE5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,IAGd,QAAPH,EACWI,IAAMC,IAAIP,EAAK,CACtBQ,OAAQP,IAGDK,IAAMG,KAAKT,EAAKC,IAEvBS,MAAK,SAAAC,GACTP,EAAQO,MACTC,OAAM,SAAAC,GACLC,IAAQD,MAAM,kBAAoBA,EAAMC,eAOpDf,EAAK,SAAU,CAACgB,SAAU,YAAaC,SAAU,QAAS,QAAQN,OAGlEX,EAAK,uBAAwB,CAACgB,SAAU,YAAaC,SAAU,OAAQC,MAAO,cAAgB,QAAQP,OC3BtG,IAMaQ,EAAW,SAACH,EAAUC,GAAX,OAAwBjB,EAAKoB,SAAiB,CAACJ,WAAUC,YAAW,SAG/EI,EAAqB,SAACC,GAAD,OAAUtB,EAAKoB,qBAA8BE,EAAKC,IAAM,SAAW,OAAQD,EAAM,SAGtGE,EAAa,SAACC,EAASC,GAAV,OAAuB1B,EAAKoB,0BAAkC,CAACK,UAASC,cAGrFC,EAAmB,SAAC,GAAD,OAAiD3B,EAAKoB,4BAAoC,CACtHK,QAD4B,EAAEA,QAE9BC,SAF4B,EAAWA,SAGvCE,WAH4B,EAAqBA,WAIjDC,WAJ4B,EAAiCA,cAQpDC,EAAe,SAACC,GAAD,OAAU/B,EAAKoB,kCAA0C,CAACW,QAAO,SAGhFC,EAAuB,SAACC,GAAD,OAAYjC,EAAKoB,uBAAgCa,EAAOV,IAAM,SAAW,OAAQU,EAAQ,SAGhHC,EAAkB,SAACD,GAAD,OAAYjC,EAAKoB,4BAAoCa,EAAQ,SAM/EE,EAAa,SAACC,GAAD,OAAcpC,EAAKoB,uBAA+B,CAACgB,YAAW,SAG3EC,EAAwB,SAACC,GAAD,OAAUtC,EAAK,0BAA2BsC,EAAM,SAGxEC,EAAgB,SAACD,GAAD,OAAUtC,EAAKoB,0BAAkCkB,EAAM,SAGvEE,EAAW,kBAAMxC,EAAKoB,0BAGtBqB,EAAgB,SAACC,GAAD,OAAY1C,EAAKoB,0BAAkC,CAACsB,UAAS,SAG7EC,EAAY,kBAAM3C,EAAKoB,qBAGvBwB,EAAc,SAACC,GAAD,OAAY7C,EAAKoB,gBAAwByB,EAAQ,SCvD7D,GACXvB,KAAM,I,kBCDJwB,EAAW,WAGF,WAEDxB,GAENyB,IAAMC,IAAIF,EAAUxB,IAJb,aASP,OAAOyB,IAAMvC,IAAIsC,IAAa,IATvB,aAcPC,IAAME,OAAOH,IC2FNI,EAtGD,WAEV,IAAIC,EAAUC,cAFE,EAIDC,IAAKC,UAAbC,EAJS,oBAMVjC,EAAOkC,EAAYlC,KACzB,GAAIA,GAAQA,EAAKC,IACb,OAAO,cAAC,IAAD,CAAUkC,GAAG,MA+BxB,OACI,sBAAKC,UAAU,QAAf,UACI,yBAAQA,UAAU,eAAlB,UACI,qBAAKC,IAAKC,EAAMC,IAAI,SACpB,sDAEJ,0BAASH,UAAU,gBAAnB,UACI,uCACA,eAAC,IAAD,CAAMA,UAAU,aAAaI,SAnCxB,SAAAC,GAGbR,EAAKS,iBACArD,KADL,uCACU,WAAMoD,GAAN,uBAAAE,EAAA,6DAGKjD,EAAsB+C,EAAtB/C,SAAUC,EAAY8C,EAAZ9C,SAHf,SAIqBE,EAASH,EAAUC,GAJxC,OAIIL,EAJJ,OAOkB,KADdsD,EAAStD,EAASV,MACbiE,QACPpD,IAAQqD,QAAQ,uBACV9C,EAAO4C,EAAOhE,KACpBsD,EAAYlC,KAAOA,EACnB+C,EAAsB/C,GAEtB6B,EAAQmB,QAAQ,MAEhBvD,IAAQD,MAAMoD,EAAOK,KAfvB,2CADV,uDAmBK1D,OAAM,SAAA2D,GACHC,QAAQC,IAAIF,OAYqCjB,KAAMA,EAAvD,UACI,cAAC,IAAKoB,KAAN,CACI5C,KAAK,WACL6C,MAAO,CACH,CAAEC,UAAU,EAAM9D,QAAS,+BAC3B,CAAE+D,IAAK,EAAG/D,QAAS,2CACnB,CAAEgE,IAAK,GAAIhE,QAAS,0CACpB,CAAEiE,QAAS,kBAAmBjE,QAAS,8DAN/C,SAUI,cAAC,IAAD,CAAOkE,OAAQ,cAACC,EAAA,EAAD,CAAcxB,UAAU,wBAA0ByB,YAAY,eAIjF,cAAC,IAAKR,KAAN,CACI5C,KAAK,WACL6C,MAAO,CACH,CAAEC,UAAU,EAAM9D,QAAS,+BAC3B,CACIqE,UAAW,SAACC,EAAGC,GAEX,OAAKA,EAEMA,EAAMC,OAAO,EACbnF,QAAQE,OAAO,8CACfgF,EAAMC,OAAO,GACbnF,QAAQE,OAAO,+CACd,kBAAkBkF,KAAKF,GAGxBlF,QAAQC,UAFRD,QAAQE,OAAO,6DANfF,QAAQE,OAAO,gCAR1C,SAuBI,cAAC,IAAD,CAAO2E,OAAQ,cAACQ,EAAA,EAAD,CAAc/B,UAAU,wBAA0BvD,KAAK,WAAWgF,YAAY,eAIjG,cAAC,IAAKR,KAAN,UACI,cAAC,IAAD,CAAQxE,KAAK,UAAUuF,SAAS,SAAShC,UAAU,oBAAnD,gC,iECjDTiC,GA7CE,CACb,CACIC,MAAO,iBACPC,IAAK,WACLC,KAAM,cAACC,EAAA,EAAD,IACNC,MAAO,QACPC,UAAU,GAEd,CACIL,MAAO,WACPC,IAAK,WACLC,KAAM,cAACI,EAAA,EAAD,IACNF,MAAO,aAEX,CACIJ,MAAO,UACPC,IAAK,SACLC,KAAM,cAACK,GAAA,EAAD,IACNH,MAAO,WAEX,CACIJ,MAAO,aACPC,IAAK,aACLC,KAAM,cAACM,GAAA,EAAD,IACNJ,MAAO,cACPK,SAAU,CACN,CACIT,MAAO,qBACPC,IAAK,oBACLG,MAAO,sBAEX,CACIJ,MAAO,kBACPC,IAAK,kBACLG,MAAO,oBAEX,CACIJ,MAAO,kBACPC,IAAK,kBACLG,MAAO,uBChChBM,GAAWC,IAAXD,QACDE,G,4MAGFC,QAAU,SAACC,GAAU,IAEVV,EAAmBU,EAAnBV,MAAOC,EAAYS,EAAZT,SACRU,EAAQnD,EAAYlC,KAAKgB,KAAKqE,MAOpC,QAAe,UANEnD,EAAYlC,KAAKN,WAMRiF,IAAoC,IAAxBU,EAAMC,QAAQZ,OAEzCU,EAAKL,YACHK,EAAKL,SAASQ,MAAK,SAAAC,GAAK,OAAkC,IAA9BH,EAAMC,QAAQE,EAAMd,W,EA0BjEe,aAAe,SAACpB,GAEZ,IAAMqB,EAAO,EAAKC,MAAMC,SAASC,SAEjC,OAAOxB,EAASyB,QAAO,SAACC,EAAKX,GAGrB,EAAKD,QAAQC,KACRA,EAAKL,UASQK,EAAKL,SAASQ,MAAM,SAAAS,GAAK,OAAgC,IAA5BN,EAAKJ,QAAQU,EAAMtB,YAE1D,EAAKuB,QAAUb,EAAKb,KAGxBwB,EAAIG,KACA,cAAClB,GAAD,CAAwBR,KAAMY,EAAKZ,KAAMF,MAAOc,EAAKd,MAArD,SACK,EAAKmB,aAAaL,EAAKL,WADdK,EAAKb,OAdvBwB,EAAIG,KACA,cAAC,IAAK7C,KAAN,CAA0BmB,KAAMY,EAAKZ,KAArC,SACI,cAAC,IAAD,CAAMrC,GAAIiD,EAAKV,MAAf,SACKU,EAAKd,SAFEc,EAAKb,OAoBjC,OAAOwB,IACR,K,0EAKHI,KAAKC,UAAYD,KAAKV,aAAapB,M,+BAKnC,IAAIqB,EAAOS,KAAKR,MAAMC,SAASC,SACzBI,EAAUE,KAAKF,QAKrB,OAJ6B,IAAzBP,EAAKJ,QAAQ,YACbI,EAAO,WAIH,sBAAKtD,UAAU,WAAf,UACI,cAAC,IAAD,CAAMD,GAAG,IAAIC,UAAU,kBAAvB,SACI,qBAAKC,IAAKC,EAAMC,IAAI,WAGxB,cAAC,IAAD,CACI8D,gBAAiB,CAACJ,GAClBK,aAAc,CAACZ,GACfa,KAAK,SACLC,MAAM,OAJV,SAwCQL,KAAKC,mB,GAvIXK,aAiJPC,eAAWxB,I,qCChKnB,SAASyB,GAAWC,GACvB,IAAKA,EAAM,MAAO,GAClB,IAAIC,EAAO,IAAIC,KAAKF,GACpB,OAAOC,EAAKE,cAAgB,KAAOF,EAAKG,WAAa,GAAK,IAAMH,EAAKI,UAAY,IAAMJ,EAAKK,WAAa,IAAML,EAAKM,aAAe,IAAMN,EAAKO,a,ICM5IC,G,4MAEFC,MAAQ,CACJC,YAAaZ,GAAWG,KAAKU,Q,EAGjCC,QAAU,WACN,EAAKC,WAAaC,aAAY,WAC1B,IAAMJ,EAAcZ,GAAWG,KAAKU,OACpC,EAAKI,SAAS,CAACL,kBAChB,M,EAGPM,SAAW,WACP,IACIvD,EADEoB,EAAO,EAAKC,MAAMC,SAASC,SAYjC,OAVAxB,GAASyD,SAAQ,SAAA1C,GACb,GAAIA,EAAKV,QAAQgB,EACbpB,EAAQc,EAAKd,WACV,GAAIc,EAAKL,SAAU,CACtB,IAAMiB,EAAQZ,EAAKL,SAASQ,MAAK,SAAAS,GAAK,OAAgC,IAA5BN,EAAKJ,QAAQU,EAAMtB,UACzDsB,IACA1B,EAAQ0B,EAAM1B,WAInBA,G,EAgBXyD,OAAS,WACLC,KAAMC,QAAQ,CACV3D,MAAO,yBACPE,KAAM,cAAC0D,GAAA,EAAD,IACNC,KAAM,WAEFpF,IACAb,EAAYlC,KAAO,GACnB,EAAK2F,MAAM9D,QAAQmB,QAAQ,c,kEAlBnCmD,KAAKsB,Y,6CAMLW,cAAcjC,KAAKuB,c,+BAiBZ,IAEAH,EAAepB,KAAKmB,MAApBC,YAED7H,EAAWwC,EAAYlC,KAAKN,SAE5B4E,EAAS6B,KAAK0B,WAEpB,OACI,sBAAKzF,UAAU,SAAf,UACI,sBAAKA,UAAU,aAAf,UACI,6CAAgB1C,KAChB,cAAC,IAAD,CAAQ0C,UAAU,oBAAoBiG,QAASlC,KAAK4B,OAAQvD,KAAM,cAAC8D,GAAA,EAAD,IAAoBzJ,KAAK,OAA3F,uBAEJ,sBAAKuD,UAAU,gBAAf,UACI,qBAAKA,UAAU,qBAAf,SAAqCkC,IACrC,qBAAKlC,UAAU,sBAAf,SACI,+BAAOmF,gB,GAxEVd,aAgFNC,eAAWW,ICvFLkB,G,uKAEb,OACI,2C,GAHsB9B,a,+ECI3B+B,I,OAAczG,IAAdyG,MAAMnF,GAAQtB,IAARsB,KAEQoF,G,4MAEjBC,QAAUC,IAAMC,Y,0EAOZzC,KAAKR,MAAMkD,QAAQ1C,KAAKuC,W,+BAKxB,IAAMI,EAAiB,CACnBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAIZG,EAA6B,CAC/BD,WAAY,CACVH,GAAI,CAAEC,KAAM,GAAII,OAAQ,GACxBH,GAAI,CAAED,KAAM,GAAII,OAAQ,KAI9B,OACI,cAAC,IAAD,2BAAMC,IAAKnD,KAAKuC,SAAaU,GAA7B,aACI,cAACZ,GAAD,CACI/H,KAAK,SADT,SAGK,SAAC8I,EAAD,SAAWC,EAAX,EAAWA,IAAK7H,EAAhB,EAAgBA,OAAY8H,EAA5B,EAA4BA,OAA5B,OACG,qCACKF,EAAOG,KAAI,SAACC,EAAOC,GAAR,OACR,wBAACvG,GAAD,6BACmB,IAAVuG,EAAcd,EAAiBM,GADxC,IAEIS,MAAiB,IAAVD,EAAc,SAAW,GAChCrG,UAAU,EACVgB,IAAKoF,EAAMpF,MAEX,cAAClB,GAAD,6BACQsG,GADR,IAEIG,gBAAiB,CAAC,WAAY,UAC9BxG,MAAO,CACH,CACAC,UAAU,EACVwG,YAAY,EACZtK,QAAS,iDAGbuK,SAAO,EAVX,SAYI,cAAC,IAAD,CAAOnG,YAAY,QAAQoG,MAAO,CAAEC,MAAO,YAE9CX,EAAOtF,OAAS,EACb,cAACkG,GAAA,EAAD,CACI/H,UAAU,wBACViG,QAAS,kBAAM1G,EAAOgI,EAAMlJ,SAEhC,SAGZ,eAAC4C,GAAD,WACI,cAAC,IAAD,CACIxE,KAAK,SACLwJ,QAAS,kBAAMmB,KACfS,MAAO,CAAEC,MAAO,OAChB1F,KAAM,cAAC4F,GAAA,EAAD,IAJV,2BAQA,cAAC,IAAKC,UAAN,CAAgBZ,OAAQA,MATlB,yB,GApEChD,aCAlB6D,G,4MAEnBhD,MAAQ,CACNtD,MAAOuG,KAAO5D,GAAWG,KAAKU,QAC9BgD,cAAeD,KAAO5D,GAAWG,KAAKU,QACtCiD,kBAAkB,EAClBC,UAAW,I,EAGbC,SAAW,SAAA3G,GACT,EAAK4D,SAAS,CACZ5D,QACAwG,cAAexG,K,EAInB4G,cAAgB,SAAA5G,GACd,EAAK4D,SAAS,CACZ5D,W,EAIJ6G,SAAW,WACT,EAAK5I,KAAK6I,QAAQpI,iBACfrD,KADH,uCACS,WAAMoD,GAAN,iBAAAE,EAAA,6DACL,EAAKiF,SAAS,CACZ6C,kBAAkB,IAWpB,EAAKxI,KAAK6I,QAAQC,cAEXxJ,EAAUkB,EAAVlB,OACDyJ,EAAc,CAACnE,KAAM,EAAKS,MAAMkD,cAAeS,UAAW1J,GAhB3D,SAiBgBD,EAAY0J,GAjB5B,OAkBoB,IAlBpB,OAkBMpM,KAAKiE,QACdpD,IAAQqD,QAAQ,8BAChB,EAAKoI,aAELzL,IAAQD,MAAM,yBAtBX,2CADT,kCAAA2G,KAAA,gBA2BG5G,OAAM,SAAA2D,GACLC,QAAQC,IAAIF,O,EAIlBgI,U,sBAAY,8BAAAvI,EAAA,sEACWtB,IADX,OAKe,KAJnBuB,EADI,QAKChE,KAAKiE,SACR6H,EAAY9H,EAAOhE,KAAKA,KAC9B,EAAKgJ,SAAS,CACZ8C,eARM,2C,qEAkBV,MAAkC,UAA9BxI,EAAYlC,KAAKN,UACZwC,EAAYlC,KAAKgB,KAAKqE,MAAMC,QAAQ,gBAAkB,I,kDAK/Da,KAAK+E,c,+BAGI,IAAD,SAEsD/E,KAAKmB,MAA3DtD,EAFA,EAEAA,MAAOwG,EAFP,EAEOA,cAAeC,EAFtB,EAEsBA,iBAAkBC,EAFxC,EAEwCA,UAuChD,OACE,qCACE,cAAC,KAAD,CAAOjL,QAAO,6BAAwB+K,GAAiBA,EAAcW,OAAO,iBAC5E,cAAC,IAAD,CAAQtM,KAAK,UAAUuM,UAAWjF,KAAKkF,uBAAwBhD,QAAS,kBAAM,EAAKT,SAAS,CAAC6C,kBAAkB,KAA/G,yBACA,cAAC,KAAD,CACEa,eAnBN,SAAwBtH,GACtB,IAAMuH,EAxBR,SAAqBvH,GACnB,IAAIuH,EAAW,GAmBf,OAbAb,EAAUhB,KAAI,SAAAtE,GACZ,IAAIpB,EAAMwH,SAAWpG,GAAOmF,KAAO5D,GAAWvB,EAAKyB,OAAO2E,SACpDxH,EAAMyH,UAAYlB,KAAO5D,GAAWvB,EAAKyB,OAAO4E,SAC9CzH,EAAM6C,SAAW0D,KAAO5D,GAAWvB,EAAKyB,OAAOA,OACjD,IAAK,IAAI6E,EAAI,EAAGA,EAAItG,EAAK6F,UAAUhH,OAAQyH,IACzCH,EAASrF,KAAK,CAACyF,QAASvG,EAAK6F,UAAUS,KAM/C,OAAOH,GAAY,MAEdA,GAAY,GAIFK,CAAY5H,GAE7B,OACE,oBAAI5B,UAAU,SAAd,SACGmJ,EAAS7B,KAAI,SAAAtE,GAAI,OAChB,6BACE,cAAC,KAAD,CAAOyG,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAAIC,KAAM9G,EAAKuG,WADjEvG,EAAKuG,eAchB3H,MAAOA,EACP2G,SAAUxE,KAAKwE,SACfC,cAAezE,KAAKyE,gBAEtB,cAAC,KAAD,CACEtG,MAAM,aACN6H,QAAS1B,EACTtC,KAAMhC,KAAK0E,SACXuB,SAAU,WACN,EAAKxE,SAAS,CACZ6C,kBAAkB,IAEpB,EAAKxI,KAAK6I,QAAQC,eARxB,SAWE,cAAC,GAAD,CACIlC,QAAS,SAAC5G,GAAD,OAAU,EAAKA,KAAOA,c,GAjJHwE,a,oBCP7B4F,GAAiB,gCCMtBC,GAASC,KAATD,KACaE,G,kDAEjB,WAAa7G,GAAQ,IAAD,8BAChB,cAAMA,IAOV2B,MAAQ,CACJmF,MAAO,EACPC,QAAS,IAVO,EAapBC,WAboB,uCAaP,WAAOxM,GAAP,qBAAAwC,EAAA,6DACT,EAAKxC,QAAUA,EACf,EAAKyH,SAAS,CAACgF,SAAS,IAFf,SAGY1M,EAAWC,ED1Bf,GCuBR,OAGHyC,EAHG,OAKT,EAAKgF,SAAS,CAACgF,SAAS,IACC,IAArBhK,EAAOhE,KAAKiE,SAAa,EACHD,EAAOhE,KAAKA,KAA3B6N,EADiB,EACjBA,MAAOI,EADU,EACVA,KACd,EAAKjF,SAAS,CACV6E,QACAC,QAASG,KAVR,2CAbO,sDAEhB,EAAKvF,MAAQ,CACTwF,SAAU,EACVC,SAAU,GAJE,E,gEA6BhB5G,KAAKwG,WAAW,K,+BAGT,IAAD,SAEqBxG,KAAKmB,MAAxBoF,EAFF,EAEEA,QAASD,EAFX,EAEWA,MAEjB,OACI,qCACKC,GAAWD,EAAM,GAAKC,EAAQM,MAAM7G,KAAKmB,MAAMwF,SAAU3G,KAAKmB,MAAMyF,UAAUrD,KAAI,SAAA/I,GAAM,OACrF,cAAC,KAAD,CACIsM,WAAS,EACThD,MAAO,CAAEC,MAAO,KAChBgD,MAAO,qBAAK3K,IAAI,MAAMF,IAAKgK,GAAiB1L,EAAOwM,MAAM,KACzD9E,QAAS,kBAAM,EAAK1C,MAAM9D,QAAQqE,KAAK,kBAAmB,CAACvF,YAJ/D,SAMI,cAAC2L,GAAD,CAAMhI,MAAO3D,EAAOF,YAG5B,cAAC,KAAD,CACI2M,eAAgB,EAChBC,gBAAiB,EACjBC,SAAUnH,KAAKwG,WACfF,MAAOA,W,GAtDUhG,a,UCFhB8G,G,uKACN,IAAD,SAIsBpH,KAAKR,MAAMC,SAAS0B,MAAM3G,OAJhD,IAICwM,aAJD,MAIO,GAJP,EAIWK,EAJX,EAIWA,QAEXlJ,EACF,iCACI,cAAC,IAAD,CACAzF,KAAK,OACL2F,KAAM,cAACiJ,GAAA,EAAD,CAAmBxD,MAAO,CAAC4B,MAAO,UAAW6B,YAAa,EAAGC,SAAU,MAC7EtF,QAAS,kBAAM,EAAK1C,MAAM9D,QAAQ+L,YAGlC,qDAIR,OACI,eAAC,KAAD,CAAMtJ,MAAOA,EAAb,UACI,+BAEQ6I,EAAMzD,KAAI,SAAAmE,GAAG,OACT,qBAEIzL,UAAU,eACVC,IAAKgK,GAAiBwB,EACtBtL,IAAI,OAHCsL,QASrB,sBAAMC,wBAAyB,CAACC,OAAQP,Y,GAlCnB/G,aCEhBuH,G,uKAEb,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACvI,KAAK,UAAUwI,UAAW1B,KACvC,cAAC,IAAD,CAAO9G,KAAK,kBAAkBwI,UAAWX,KACzC,cAAC,IAAD,CAAUpL,GAAG,mB,GANOsE,a,iDCD9B0H,GAASC,KAAOD,OACDE,G,4MAEjB/G,MAAQ,CACJmF,MAAO,EACPC,QAAS,GAcTE,SAAS,EACTtM,WAAY,GACZC,WAAY,c,EAIhB+N,YAAc,WACV,EAAKC,QAAU,CACX,CACEjK,MAAO,OACPkK,UAAW,QAEb,CACElK,MAAO,WACPkK,UAAW,YAEb,CACElK,MAAO,WACPkK,UAAW,YAGb,CACEtE,MAAO,IACPuE,MAAO,SACPnK,MAAO,SACPoK,OAAQ,SAAC/N,GAAD,OACN,eAAC,KAAD,WACI,cAAC,IAAD,CAAQ9B,KAAK,OAAOwJ,QAAS,kBAAM,EAAK1C,MAAM9D,QAAQqE,KAAK,6BAA8B,CAACvF,YAA1F,qBACA,cAAC,IAAD,CAAQ9B,KAAK,OAAOwJ,QAAS,kBAAM1H,EAAS,EAAKgF,MAAM9D,QAAQqE,KAAK,wCAA0CyI,KAAKC,UAAUjO,IAAW,EAAKgF,MAAM9D,QAAQqE,KAAK,kCAAhK,kBACA,cAAC,KAAD,CACI5B,MAAM,sCACNuK,UAAS,sBAAE,sBAAAlM,EAAA,sEACc/B,EAAgBD,GAD9B,OAEkB,IAFlB,OAEI/B,KAAKiE,OACZpD,IAAQqD,QAAQ,oCAEhBrD,IAAQD,MAAM,gCAElB,EAAKmN,WAAW,GAPT,2CASXmC,OAAO,MACPC,WAAW,KAZf,SAcI,cAAC,IAAD,CACIlQ,KAAK,OACLoL,MAAO,CAAC4B,MAAO,OAFnB,6B,EAoBpBc,W,uCAAa,WAAOxM,GAAP,2BAAAwC,EAAA,yDACT,EAAKxC,QAAUA,EACf,EAAKyH,SAAS,CAACgF,SAAS,IAFf,EAGwB,EAAKtF,MAA/BhH,EAHE,EAGFA,WAAYC,EAHV,EAGUA,YAEfD,EALK,gCAMUD,EAAiB,CAACF,UAASC,SJ/F7B,EI+FkDE,aAAYC,eANtE,OAMLqC,EANK,+CAYU1C,EAAWC,EJrGb,GIyFR,QAYLyC,EAZK,eAeT,EAAKgF,SAAS,CAACgF,SAAS,IAKC,IAArBhK,EAAOhE,KAAKiE,SAAa,EACHD,EAAOhE,KAAKA,KAA3B6N,EADiB,EACjBA,MAAOI,EADU,EACVA,KACd,EAAKjF,SAAS,CACV6E,QACAC,QAASG,KAxBR,4C,gIA8BT1G,KAAKmI,gB,0CAILnI,KAAKwG,WAAW,K,+BAGT,IAAD,SAEsDxG,KAAKmB,MAAzDoF,EAFF,EAEEA,QAASD,EAFX,EAEWA,MAAOG,EAFlB,EAEkBA,QAAStM,EAF3B,EAE2BA,WAAYC,EAFvC,EAEuCA,WAEvC+D,EACF,iCACI,eAAC,KAAD,CACAN,MAAOzD,EACP0J,MAAO,CAACC,MAAO,KACfoD,SAAU,SAAAtJ,GAAK,OAAI,EAAK4D,SAAS,CAACrH,WAAWyD,KAH7C,UAKI,cAACmK,GAAD,CAAQnK,MAAM,aAAd,4BACA,cAACmK,GAAD,CAAQnK,MAAM,iBAAd,gCACA,cAACmK,GAAD,CAAQnK,MAAM,iBAAd,kCAEJ,cAAC,IAAD,CACAH,YAAY,UACZF,OAAQ,cAACqL,GAAA,EAAD,IACR/E,MAAO,CAACC,MAAO,IAAK+E,OAAQ,UAC5BjL,MAAO1D,EACPgN,SAAU,SAAA4B,GAAK,OAAI,EAAKtH,SAAS,CAACtH,WAAW4O,EAAMC,OAAOnL,WAE1D,cAAC,IAAD,CAAQnF,KAAK,UAAUwJ,QAAS,kBAAM,EAAKsE,WAAW,IAAtD,uBAIFyC,EACF,cAAC,IAAD,CAAQvQ,KAAK,UAAU2F,KAAM,cAAC4F,GAAA,EAAD,IAAkB/B,QAAS,kBAAM,EAAK1C,MAAM9D,QAAQqE,KAAK,kCAAtF,wBAKJ,OACI,cAAC,KAAD,CAAM5B,MAAOA,EAAO8K,MAAOA,EAA3B,SACI,cAAC,KAAD,CACIb,QAASpI,KAAKoI,QACdc,WAAY3C,EACZ4C,OAAO,MACPC,UAAQ,EACRC,WAAY,CACR1E,QAAS3E,KAAKhG,QACdkN,gBJvKC,EIwKDoC,iBAAiB,EACjBhD,QACAa,SAAUnH,KAAKwG,YAEnBC,QAASA,U,GApKYnG,a,8BCDzC,SAASiJ,GAAUC,GACjB,OAAO,IAAI7Q,SAAQ,SAACC,EAASC,GAC3B,IAAM4Q,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,kBAAMhR,EAAQ6Q,EAAOhN,SACrCgN,EAAOI,QAAU,SAAAxQ,GAAK,OAAIR,EAAOQ,O,IAIhByQ,G,kDAanB,WAAatK,GAAQ,IAAD,uBAClB,cAAMA,IARR2B,MAAQ,CACN4I,gBAAgB,EAChBC,aAAc,GACdC,aAAc,GACdC,SAAU,IAGQ,EAwBpBC,UAAY,WACV,OAAO,EAAKhJ,MAAM+I,SAAS3G,KAAI,SAAAiG,GAAI,OAAIA,EAAKlP,SAzB1B,EA4BpB8P,aAAe,kBAAM,EAAK3I,SAAS,CAAEsI,gBAAgB,KA5BjC,EA8BpBM,cA9BoB,uCA8BJ,WAAMb,GAAN,SAAAhN,EAAA,yDACTgN,EAAKhR,KAAQgR,EAAKc,QADT,gCAESf,GAAUC,EAAKe,eAFxB,OAEZf,EAAKc,QAFO,cAKd,EAAK7I,SAAS,CACZuI,aAAcR,EAAKhR,KAAOgR,EAAKc,QAC/BP,gBAAgB,EAChBE,aAAcT,EAAKlP,MAAQkP,EAAKhR,IAAIgS,UAAUhB,EAAKhR,IAAIiS,YAAY,KAAO,KAR9D,2CA9BI,wDA4CpBC,aA5CoB,uCA4CL,uCAAAlO,EAAA,yDAASgN,EAAT,EAASA,KAAMU,EAAf,EAAeA,SACV,SAAdV,EAAK9M,OADI,gBAGS,KADdD,EAAS+M,EAAKrQ,UACTuD,QACTpD,IAAQqD,QAAQ,oCADK,EAEDF,EAAOhE,KAApB6B,EAFc,EAEdA,KAAM9B,EAFQ,EAERA,KACbgR,EAAOU,EAASA,EAASpM,OAAO,IAC3BxD,KAAOA,EACZkP,EAAKhR,IAAMA,GAEXc,IAAQD,MAAM,2BAVL,0BAYY,YAAdmQ,EAAK9M,OAZH,iCAaUrC,EAAamP,EAAKlP,MAb5B,OAcc,IAdd,OAcA7B,KAAKiE,OACdpD,IAAQqD,QAAQ,mCAEhBrD,IAAQD,MAAM,+BAjBL,QAqBb,EAAKoI,SAAS,CAAEyI,aArBH,4CA5CK,sDAGlB,IAAIA,EAAW,GAGRlD,EAAS,EAAKxH,MAAdwH,MANW,OAOdA,GAASA,EAAMlJ,OAAO,IACxBoM,EAAWlD,EAAMzD,KAAI,SAACmE,EAAKjE,GAAN,MAAiB,CACpCkH,KAAMlH,EACNnJ,KAAMoN,EACNhL,OAAQ,OACRlE,IAAK0N,GAAiBwB,OAI1B,EAAKvG,MAAQ,CACX4I,gBAAgB,EAChBC,aAAc,GACdE,YAnBgB,E,qDAoEV,IAAD,EAC0DlK,KAAKmB,MAA9D4I,EADD,EACCA,eAAgBC,EADjB,EACiBA,aAAcE,EAD/B,EAC+BA,SAAUD,EADzC,EACyCA,aAC1CW,EACJ,gCACE,cAAC3G,GAAA,EAAD,IACA,qBAAKH,MAAO,CAAE+G,UAAW,GAAzB,uBAGJ,OACE,qCACE,cAAC,KAAD,CACEC,OAAO,kCACPC,OAAO,UACPzQ,KAAK,QACL0Q,SAAS,eACTd,SAAUA,EACVe,UAAWjL,KAAKqK,cAChBlD,SAAUnH,KAAK0K,aAPjB,SASGR,EAASpM,QAAU,EAAI,KAAO8M,IAEjC,cAAC,KAAD,CACE5E,QAAS+D,EACT5L,MAAO8L,EACPiB,OAAQ,KACRjF,SAAUjG,KAAKoK,aAJjB,SAME,qBAAKhO,IAAI,UAAU0H,MAAO,CAAEC,MAAO,QAAU7H,IAAK8N,a,GA5GlBxH,IAAMlC,W,iECP3B6K,I,yDAUjB,WAAY3L,GAAQ,IAAD,uBACf,cAAMA,IALV2B,MAAQ,CACJiK,YAAaC,eAAYC,eAGV,EAkBnBC,oBAAsB,SAACH,GACnB,EAAK3J,SAAS,CACd2J,iBApBe,EAwBnBI,WAAa,WACT,OAAOC,KAAYC,wBAAa,EAAKvK,MAAMiK,YAAYO,uBAzBxC,EAgCnBC,oBAAsB,SAACpC,GACnB,OAAO,IAAI7Q,SACT,SAACC,EAASC,GACR,IAAMgT,EAAM,IAAIC,eAChBD,EAAIE,KAAK,OAAQ,mCACjB,IAAMtT,EAAO,IAAIuT,SACjBvT,EAAKwT,OAAO,QAASzC,GACrBqC,EAAIK,KAAKzT,GACToT,EAAIM,iBAAiB,QAAQ,WAC3B,IACM3T,EADWgQ,KAAK4D,MAAMP,EAAIQ,cACX5T,KAAKD,IAC1BI,EAAQ,CAACH,KAAM,CAAC6T,KAAM9T,QAExBqT,EAAIM,iBAAiB,SAAS,WAC5B,IAAM9S,EAAQmP,KAAK4D,MAAMP,EAAIQ,cAC7BxT,EAAOQ,UA7Cb,IAAMkT,EAAO,EAAK/M,MAAM6H,QACxB,GAAIkF,EAAM,CACN,IAAMC,EAAeC,KAAYF,GAC3BG,EAAeC,gBAAaC,qBAAqBJ,EAAaK,eAC9DzB,EAAcC,eAAYyB,kBAAkBJ,GAClD,EAAKvL,MAAQ,CACTiK,oBAGJ,EAAKjK,MAAQ,CACTiK,YAAaC,eAAYC,eAZlB,S,qDAqDT,IACEF,EAAgBpL,KAAKmB,MAArBiK,YACR,OAEI,cAAC,UAAD,CACAA,YAAaA,EACb2B,YAAa,CAACC,OAAQ,kBAAmBC,UAAW,IAAKC,YAAa,IACtE3B,oBAAqBvL,KAAKuL,oBAC1B4B,QAAS,CACLC,MAAO,CAAEC,eAAgBrN,KAAK4L,oBAAqBxP,IAAK,CAAEkR,SAAS,EAAMC,WAAW,W,GAxExDjN,cCCrCpD,GAAQtB,IAARsB,KA6IQsQ,GA5II,WAGf,IAKI9R,EAAUC,cARO,EASNC,IAAKC,UAAbC,EATc,sBAYK0G,IAAMiL,SAAS,GAZpB,mBAYd5P,EAZc,KAYP6P,EAZO,KAkBfC,EAAKC,mBACPD,EAAGhJ,UACHgJ,EAAGhJ,QAAU9G,GAGjB,IAAMgQ,EAASD,mBACVC,EAAOlJ,UACRkJ,EAAOlJ,QAAU9G,GAGrB,IAEIrD,EACAV,EAHEgU,ECvCK,SAAkBxT,GAE7B,IAAIyT,EAAM,IAAIC,OAAO,QAAS1T,EAAM,iBAChC2T,EAAIC,OAAOzO,SAAS0O,OAAOrI,OAAO,GAAGsI,MAAML,GAC/C,OAAQ,MAALE,EACQI,SAASJ,EAAE,IAEX,KDgCKK,CAAS,UACnBC,IAAaT,EAGfS,GACA/T,EAASgO,KAAK4D,MAAM0B,GACpBhU,EAAMU,EAAOV,KAEbU,EAAS,GApCQ,IAsCdwM,EAASxM,EAATwM,MACAK,EAAW7M,EAAX6M,QA6CDlJ,EACF,iCACI,cAAC,IAAD,CACAzF,KAAK,OACL2F,KAAM,cAACiJ,GAAA,EAAD,CAAmBxD,MAAO,CAAC4B,MAAO,UAAW6B,YAAa,EAAGC,SAAU,MAC7EtF,QAAS,kBAAMxG,EAAQ+L,YAGvB,+BAAO8G,EAAW,cAAgB,sBAI1C,OACI,cAAC,KAAD,CAAMpQ,MAAOA,EAAb,SACI,eAAC,IAAD,6BA/Fe,CACnByE,SAAU,CAAEE,KAAM,GAClBE,WAAY,CAAEF,KAAM,KA6FhB,IAA0BzG,SAzDjB,SAAAC,GACbR,EAAKS,iBACArD,KADL,uCACU,WAAMoD,GAAN,mCAAAE,EAAA,6DAIKlC,EAAiEgC,EAAjEhC,KAAMkU,EAA2DlS,EAA3DkS,SAAUC,EAAiDnS,EAAjDmS,SAAUC,EAAuCpS,EAAvCoS,OAAQC,EAA+BrS,EAA/BqS,YAAaC,EAAkBtS,EAAlBsS,MAAOC,EAAWvS,EAAXuS,QACxDC,EAAOxS,EAAPwS,IACLA,EAAM1K,KAAO0K,GAAK9J,OAAO,cAKnBgC,EAAQ2G,EAAGhJ,QAAQwF,YACnB9C,EAAUwG,EAAOlJ,QAAQ6G,aACzBhR,EAAS,CAACF,OAAMkU,WAAUC,WAAUC,SAAQI,MAAKH,cAAaC,QAAOC,UAAS7H,QAAOK,WAKvFkH,IACA/T,EAAOV,IAAMA,GAnBf,SAuBmBS,EAAqBC,GAvBxC,OA2BuB,IA3BvB,OA2BS/B,KAAKiE,QACZpD,IAAQqD,QAAR,uBAAgC4R,EAAW,UAAY,QAAvD,iBACA7S,EAAQ+L,UAERnO,IAAQD,MAAR,oBAA2BkV,EAAW,SAAW,MAAjD,iBA/BF,4CADV,uDAqCKnV,OAAM,SAAA2D,GACHC,QAAQC,IAAIF,OAkB8BjB,KAAMA,EAApD,UACI,cAAC,GAAD,CAAM4H,MAAM,OAAOqL,aAAcvU,EAAOF,KAAMA,KAAK,OAAO6C,MAAO,CAAC,CAACC,UAAU,EAAM9D,QAAS,0BAA5F,SACI,cAAC,IAAD,CAAOoE,YAAY,4BAEvB,cAAC,GAAD,CAAMgG,MAAM,WAAWqL,aAAcvU,EAAOgU,SAAUlU,KAAK,WAAW6C,MAAO,CAAC,CAACC,UAAU,EAAM9D,QAAS,8BAAxG,SACI,cAAC,IAAD,CAAOoE,YAAY,iCAEvB,cAAC,GAAD,CAAMgG,MAAM,WAAWqL,aAAcvU,EAAOiU,SAAUnU,KAAK,WAAW6C,MAAO,CAAC,CAACC,UAAU,EAAM9D,QAAS,8BAAxG,SACI,cAAC,IAAD,CAAOoE,YAAY,gCAEvB,cAAC,GAAD,CAAMgG,MAAM,SAASqL,aAAcvU,EAAOkU,OAAQpU,KAAK,SAAvD,SACI,eAAC,KAAM0U,MAAP,CAAa1U,KAAK,aAAa6M,SAhG9B,SAAA8H,GAEbvB,EAASuB,EAAEjG,OAAOnL,QA8F6CA,MAAOA,EAA1D,UACI,cAAC,KAAD,CAAOA,MAAM,OAAb,kBACA,cAAC,KAAD,CAAOA,MAAM,SAAb,yBAGR,cAAC,GAAD,CAAM6F,MAAM,MAAMqL,aAAc3K,KAAO5J,EAAOsU,KAAMxU,KAAK,MAAzD,SACI,cAAC,KAAD,MAEJ,cAAC,GAAD,CAAMoJ,MAAM,cAAcqL,aAAcvU,EAAOmU,YAAarU,KAAK,cAAjE,SACI,cAAC,IAAD,CAAOoD,YAAY,mCAEvB,cAAC,GAAD,CAAMgG,MAAM,YAAYqL,aAAcvU,EAAOoU,MAAOtU,KAAK,QAAzD,SACI,cAAC,IAAD,CAAOoD,YAAY,oCAEvB,cAAC,GAAD,CAAMgG,MAAM,UAAUqL,aAAcvU,EAAOqU,QAASvU,KAAK,UAAzD,SACI,cAAC,IAAD,CAAOoD,YAAY,+BAEvB,cAAC,GAAD,CAAMgG,MAAM,QAAZ,SACI,cAAC,GAAD,CAAcP,IAAKwK,EAAI3G,MAAOA,MAElC,cAAC,GAAD,CAAMtD,MAAM,UAAUd,SAAU,CAACE,KAAM,GAAIE,WAAY,CAACF,KAAK,IAA7D,SACI,cAAC,GAAD,CAAgBK,IAAK0K,EAAQxG,QAASA,MAE1C,cAAC,GAAD,UACI,cAAC,IAAD,CAAQ3O,KAAK,UAAUuF,SAAS,SAAhC,6B,UE3Idf,GAAOmF,KAAKnF,KAEGkK,G,uKACN,IAAD,SAE0FpH,KAAKR,MAAMC,SAAS0B,MAAM3G,OAAnHF,EAFD,EAECA,KAAMkU,EAFP,EAEOA,SAAUC,EAFjB,EAEiBA,SAAUC,EAF3B,EAE2BA,OAAQI,EAFnC,EAEmCA,IAAKH,EAFxC,EAEwCA,YAAaC,EAFrD,EAEqDA,MAAOC,EAF5D,EAE4DA,QAF5D,IAEqE7H,aAFrE,MAE2E,GAF3E,EAE+EK,EAF/E,EAE+EA,QAE/ElJ,EACF,iCACI,cAAC,IAAD,CACAzF,KAAK,OACL2F,KAAM,cAACiJ,GAAA,EAAD,CAAmBxD,MAAO,CAAC4B,MAAO,UAAW6B,YAAa,EAAGC,SAAU,MAC7EtF,QAAS,kBAAM,EAAK1C,MAAM9D,QAAQ+L,YAGlC,qDAIR,OACI,cAAC,KAAD,CAAMtJ,MAAOA,EAAOlC,UAAU,iBAA9B,SACI,eAAC,KAAD,WACI,eAAC,GAAD,WACI,sBAAMA,UAAU,OAAhB,mBACA,+BAAO3B,OAEX,eAAC,GAAD,WACI,sBAAM2B,UAAU,OAAhB,uBACA,+BAAOuS,OAEX,eAAC,GAAD,WACI,sBAAMvS,UAAU,OAAhB,uBACA,+BAAOwS,OAEX,eAAC,GAAD,WACI,sBAAMxS,UAAU,OAAhB,qBACA,+BAAOyS,OAEX,eAAC,GAAD,WACI,sBAAMzS,UAAU,OAAhB,kBACA,+BAAO6S,OAEX,eAAC,GAAD,WACI,sBAAM7S,UAAU,OAAhB,0BACA,+BAAO0S,OAEX,eAAC,GAAD,WACI,sBAAM1S,UAAU,OAAhB,wBACA,+BAAO2S,OAEX,eAAC,GAAD,WACI,sBAAM3S,UAAU,OAAhB,sBACA,+BAAO4S,OAEX,eAAC,GAAD,WACI,sBAAM5S,UAAU,OAAhB,oBACA,+BAEQ+K,EAAMzD,KAAI,SAAAmE,GAAG,OACT,qBAEIzL,UAAU,eACVC,IAAKgK,GAAiBwB,EACtBtL,IAAI,OAHCsL,WASzB,eAAC,GAAD,WACI,sBAAMzL,UAAU,OAAhB,sBACA,sBAAM0L,wBAAyB,CAACC,OAAQP,iB,GArE3B/G,aCGhB4O,I,8KAEb,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOpH,OAAK,EAACvI,KAAK,qBAAqBwI,UAAWG,KAClD,cAAC,IAAD,CAAO3I,KAAK,gCAAgCwI,UAAWyF,KACvD,cAAC,IAAD,CAAOjO,KAAK,6BAA6BwI,UAAWX,KACpD,cAAC,IAAD,CAAUpL,GAAG,8B,GAPiBsE,c,UCNvCpD,GAAQtB,IAARsB,KAEciS,G,4MAEjB5M,QAAUC,IAAMC,Y,0EAOZzC,KAAKR,MAAMkD,QAAQ1C,KAAKuC,W,+BAUxB,OACI,cAAC,IAAD,CAAMY,IAAKnD,KAAKuC,QAAhB,SACI,cAAC,GAAD,2BACImB,MAAM,YACNpJ,KAAK,YATM,CACvBsI,SAAU,CAAEE,KAAM,GAClBE,WAAY,CAAEF,KAAM,MAKZ,IAIIiM,aAAa,GACb5R,MAAO,CAAC,CACJC,UAAU,EACV9D,QAAS,+BAPjB,SAUI,cAAC,IAAD,CAAOoE,YAAY,yC,GA/BF4C,a,UCD9BpD,GAAQtB,IAARsB,KACAkS,GAAYC,KAAZD,SAEcE,G,kDASjB,WAAa9P,GAAQ,IAAD,uBAChB,cAAMA,IARV+C,QAAUC,IAAMC,YAOI,EASpB8M,SAAW,kBAAM,EAAKpO,MAAMqO,aATR,EAWpBC,aAAe,SAACvR,GACZ,OAAOA,EAASyB,QAAO,SAACC,EAAKX,GAMzB,OALAW,EAAIG,KACA,cAACqP,GAAD,CAAUjR,MAAOc,EAAKd,MAAtB,SACKc,EAAKL,SAAW,EAAK6Q,aAAaxQ,EAAKL,UAAY,MADtBK,EAAKV,QAIpCqB,IACR,KAnBa,EAsBpB8P,QAAU,SAAAF,GACNxS,QAAQC,IAAI,UAAWuS,GACvB,EAAK/N,SAAS,CAAC+N,iBAxBC,IAETtQ,EAAS,EAAKM,MAAM3E,KAApBqE,MAFS,OAGhB,EAAKiC,MAAQ,CACTqO,YAAatQ,GAJD,E,wEA4BhBc,KAAK2P,UAAY3P,KAAKyP,aAAavR,M,uDAKL0R,GAC9B,IAAM1Q,EAAQ0Q,EAAU/U,KAAKqE,MAC7Bc,KAAKyB,SAAS,CACV+N,YAAatQ,M,+BAIX,IAECrE,EAAQmF,KAAKR,MAAb3E,KACA2U,EAAexP,KAAKmB,MAApBqO,YAOP,OACI,eAAC,IAAD,WACI,cAAC,GAAD,2BAAM9L,MAAM,aAPG,CACvBd,SAAU,CAAEE,KAAM,GAClBE,WAAY,CAAEF,KAAM,MAKZ,aACI,cAAC,IAAD,CAAOjF,MAAOhD,EAAKP,KAAM2K,UAAQ,OAErC,cAAC,KAAD,CACI4K,WAAS,EACTC,kBAAkB,EAClBN,YAAaA,EACbE,QAAS1P,KAAK0P,QAJlB,SAMI,cAACN,GAAD,CAAUjR,MAAM,qBAAhB,SACK6B,KAAK2P,WAD+B,gB,GAtE3BrP,aCEbyP,G,kDAUjB,WAAavQ,GAAQ,IAAD,8BAChB,cAAMA,IATV2B,MAAQ,CACJ6O,MAAO,GACPnV,KAAM,GACNoV,YAAY,EACZC,aAAa,EACbzJ,SAAS,GAGO,EAKpB0J,WAAa,WACT,EAAK/H,QAAU,CACX,CACIjK,MAAO,YACPkK,UAAW,QAEf,CACIlK,MAAO,cACPkK,UAAW,cACXE,OAAQ/H,IAEZ,CACIrC,MAAO,qBACPkK,UAAW,YACXE,OAAQ/H,IAEZ,CACIrC,MAAO,WACPkK,UAAW,eAvBH,EA4BpB+H,SA5BoB,sBA4BT,8BAAA5T,EAAA,6DACP,EAAKiF,SAAS,CAACgF,SAAS,IADjB,SxBTelO,EAAKoB,yBwBSpB,OAED8C,EAFC,OAGP,EAAKgF,SAAS,CAACgF,SAAS,IACC,IAArBhK,EAAOhE,KAAKiE,SACNsT,EAAQvT,EAAOhE,KAAKA,KAC1B,EAAKgJ,SAAS,CACVuO,WAPD,2CA5BS,EAwCpBK,MAAQ,SAACxV,GACL,MAAO,CACHqH,QAAS,SAAA6G,GAEL,EAAKtH,SAAS,CACV5G,YA7CI,EAmDpByV,QAAU,WAEN,EAAKxU,KAAK6I,QAAQpI,iBACbrD,KADL,uCACW,WAAMoD,GAAN,mBAAAE,EAAA,6DAEH,EAAKiF,SAAS,CACVwO,YAAY,IAITtV,EAAY2B,EAAZ3B,SACP,EAAKmB,KAAK6I,QAAQC,cARf,SAWkBlK,EAAWC,GAX7B,OAcsB,KAHnB8B,EAXH,QAcQhE,KAAKiE,QACZpD,IAAQqD,QAAQ,gCAChB,EAAKyT,WACCvV,EAAO4B,EAAOhE,KAAKA,KAMzB,EAAKgJ,UAAS,SAAAN,GAAK,MAAK,CACpB6O,MAAM,GAAD,oBAAM7O,EAAM6O,OAAZ,CAAmBnV,SAG5BvB,IAAQD,MAAM,0BA3Bf,2CADX,kCAAA2G,KAAA,gBA+BK5G,SApFW,EAyFpBmX,kBAzFoB,sBAyFA,8BAAA/T,EAAA,6DAEhB,EAAKiF,SAAS,CACVyO,aAAa,IAGXrV,EAAO,EAAKsG,MAAMtG,KAClBqE,EAAQ,EAAKsR,KAAK7L,QAAQ4K,WAChC1U,EAAKqE,MAAQA,EACbrE,EAAK4V,UAAY9P,KAAKU,MACtBxG,EAAK6V,UAAY3U,EAAYlC,KAAKN,SAVlB,SAYKqB,EAAsBC,GAZ3B,OAaS,IAbT,OAaLpC,KAAKiE,OAIR7B,EAAKf,MAAMiC,EAAYlC,KAAK8W,SAC5B5U,EAAYlC,KAAO,GACnB+C,IACA,EAAK4C,MAAM9D,QAAQmB,QAAQ,UAC3BvD,IAAQsX,KAAK,sEAEbtX,IAAQqD,QAAQ,0CAChB,EAAK8E,SAAS,CACV5G,KAAK,aAAK,EAAKsG,MAAM6O,UAI7B1W,IAAQD,MAAM,uCA7BF,4CAvFhB,EAAKmX,KAAOhO,IAAMC,YAFF,E,wEA2HhBzC,KAAKmQ,e,0CAILnQ,KAAKoQ,a,+BAGE,IAAD,SAEkDpQ,KAAKmB,MAAtD6O,EAFD,EAECA,MAAOnV,EAFR,EAEQA,KAAMoV,EAFd,EAEcA,WAAYC,EAF1B,EAE0BA,YAAazJ,EAFvC,EAEuCA,QAEvCtI,EACF,iCACI,cAAC,IAAD,CAAQzF,KAAK,UAAUwJ,QAAS,kBAAM,EAAKT,SAAS,CAACwO,YAAY,KAAjE,yBADJ,YAEI,cAAC,IAAD,CAAQvX,KAAK,UAAUuM,UAAWpK,EAAKf,IAAKoI,QAAS,kBAAM,EAAKT,SAAS,CAACyO,aAAa,KAAvF,iCAFJ,WAGI,cAAC,KAAD,CACQ/R,MAAM,oCACNuK,UAAS,sBAAE,sBAAAlM,EAAA,sEACc1B,EAAcD,GAD5B,OAEkB,IAFlB,OAEIpC,KAAKiE,OACZpD,IAAQqD,QAAQ,kCAEhBrD,IAAQD,MAAM,8BAElB,EAAK+W,WAPE,2CASXzH,OAAO,MACPC,WAAW,KAZnB,SAcQ,cAAC,IAAD,CAAQlQ,KAAK,SAASuM,UAAWpK,EAAKf,IAAtC,yBAQhB,OACI,eAAC,KAAD,CAAMqE,MAAOA,EAAb,UACI,cAAC,KAAD,CACIiK,QAASpI,KAAKoI,QACde,OAAO,MACPC,UAAQ,EACRC,WAAY,CACRnC,gBb3LC,Ea4LDoC,iBAAiB,GAErBJ,WAAY8G,EACZa,aAAc,CACVnY,KAAM,QACNoY,gBAAiB,CAACjW,EAAKf,KACvB0K,SAAU,SAAC3J,GACP,EAAK4G,SAAS,CACV5G,WAIZwV,MAAOrQ,KAAKqQ,MACZ5J,QAASA,IAIb,cAAC,KAAD,CACItI,MAAM,eACN6H,QAASiK,EACTjO,KAAMhC,KAAKsQ,QACXrK,SAAU,WACN,EAAKxE,SAAS,CACVwO,YAAY,IAEhB,EAAKnU,KAAK6I,QAAQC,eAR1B,SAWI,cAAC,GAAD,CACIlC,QAAS,SAAC5G,GAAD,OAAU,EAAKA,KAAOA,OAIvC,cAAC,KAAD,CACIqC,MAAM,uBACN6H,QAASkK,EACTlO,KAAMhC,KAAKuQ,kBACXtK,SAAU,WACN,EAAKxE,SAAS,CACVyO,aAAa,KANzB,SAUI,cAAC,GAAD,CACIrV,KAAMA,EACNsI,IAAKnD,KAAKwQ,gB,GA/NUlQ,aCNrCpD,GAAQtB,IAARsB,KACD8K,GAASC,KAAOD,OAED+I,G,4MAEjBxO,QAAUC,IAAMC,Y,0EASZzC,KAAKR,MAAMkD,QAAQ1C,KAAKuC,W,+BAKxB,IAFK,EAOiBvC,KAAKR,MAApBwQ,EAPF,EAOEA,MAAOnW,EAPT,EAOSA,KAEd,OACI,eAAC,IAAD,2BAAMsJ,IAAKnD,KAAKuC,SARG,CACvBK,SAAU,CAAEE,KAAM,GAClBE,WAAY,CAAEF,KAAM,MAMhB,cACI,cAAC,GAAD,CACIY,MAAM,WACNpJ,KAAK,WACLyU,aAAclV,EAAKN,SACnB4D,MAAO,CAAC,CACJC,UAAU,EACV9D,QAAS,8BANjB,SASI,cAAC,IAAD,CAAOoE,YAAY,iCAGnB7D,EAAKC,IAAM,KACP,cAAC,GAAD,CACI4J,MAAM,WACNpJ,KAAK,WACLyU,aAAclV,EAAKL,SACnB2D,MAAO,CAAC,CACJC,UAAU,EACV9D,QAAS,8BANjB,SASI,cAAC,IAAD,CAAOZ,KAAK,WAAWgF,YAAY,iCAI/C,cAAC,GAAD,CACIgG,MAAM,OACNpJ,KAAK,UACLyU,aAAclV,EAAK8W,QAHvB,SAKI,cAAC,KAAD,UAEQX,EAAMzM,KAAI,SAAA1I,GAAI,OAAI,cAAC,GAAD,UAAwBA,EAAKP,MAAhBO,EAAKf,YAIhD,cAAC,GAAD,CACI4J,MAAM,QACNpJ,KAAK,QACLyU,aAAclV,EAAKJ,MAHvB,SAKI,cAAC,IAAD,CAAOiE,YAAY,sC,GAnEDsT,iBCAjBC,G,4MAEjB9P,MAAQ,CACJ+P,MAAO,GACPlB,MAAO,GACPmB,SAAS,EACT1K,SAAS,G,EAGb0B,YAAc,WACV,EAAKC,QAAU,CACX,CACIjK,MAAO,WACPkK,UAAW,YAEf,CACIlK,MAAO,gBACPkK,UAAW,cACXE,OAAQ/H,IAEZ,CACIrC,MAAO,OACPkK,UAAW,UACXE,OAAQ,SAACoI,GAAD,OAAa,EAAKS,UAAUT,KAExC,CACIxS,MAAO,QACPkK,UAAW,SAEf,CACIlK,MAAO,SACPoK,OAAQ,SAAC1O,GAAD,OACJ,iCACI,cAAC,IAAD,CACAnB,KAAK,OACLwJ,QAAS,WACL,EAAKrI,KAAOA,EACZ,EAAK4H,SAAS,CACV0P,SAAS,KALjB,kBAWA,cAAC,IAAD,CACIzY,KAAK,OACLoL,MAAO,CAAC4B,MAAO,OACfxD,QAAS,kBAAM,EAAKmP,WAAWxX,IAHnC,2B,EAcpByX,cAAgB,SAACtB,GACb,IAAMoB,EAAYpB,EAAMrQ,QAAO,SAACC,EAAK/E,GAEjC,OADA+E,EAAI/E,EAAKf,KAAOe,EAAKP,KACdsF,IACR,IACH,EAAKwR,UAAYA,G,EAGrBG,gB,sBAAkB,4BAAA/U,EAAA,6DAEd,EAAKiF,SAAS,CAAC0P,SAAS,IAGlBtX,EAAO,EAAKiC,KAAK6I,QAAQ6M,iBAC/B,EAAK1V,KAAK6I,QAAQC,cAGd,EAAK/K,OACLA,EAAKC,IAAM,EAAKD,KAAKC,KAVX,SAcOF,EAAmBC,GAd1B,OAeW,IAfX,OAeHpB,KAAKiE,QACZpD,IAAQqD,QAAR,uBAAgC,EAAK9C,KAAO,UAAY,QAAxD,eACA,EAAK4X,YAELnY,IAAQD,MAAM,2BAnBJ,2C,EAyBlBoY,S,sBAAW,kCAAAjV,EAAA,6DACP,EAAKiF,SAAS,CAACgF,SAAS,IADjB,SAEc1L,IAFd,OAED0B,EAFC,OAGP,EAAKgF,SAAS,CAACgF,SAAS,IACC,IAArBhK,EAAOhE,KAAKiE,SAAa,EACFD,EAAOhE,KAAKA,KAA5ByY,EADiB,EACjBA,MAAOlB,EADU,EACVA,MACd,EAAKsB,cAActB,GACnB,EAAKvO,SAAS,CACVyP,QACAlB,WATD,2C,EAgBXqB,WAAa,SAACxX,GACVgI,KAAMC,QAAQ,CACV3D,MAAM,0BAAD,OAA4BtE,EAAKN,SAAjC,KACLyI,KAAK,WAAD,4BAAE,sBAAAxF,EAAA,sEACmBxB,EAAcnB,EAAKC,KADtC,OAEuB,IAFvB,OAESrB,KAAKiE,QACZpD,IAAQqD,QAAQ,kCAChB,EAAK8U,YAELnY,IAAQD,MAAM,6BANhB,2CAAF,kDAAC,M,0EAaT2G,KAAKmI,gB,0CAILnI,KAAKyR,a,+BAGE,IAAD,SAEmCzR,KAAKmB,MAAvC+P,EAFD,EAECA,MAAOlB,EAFR,EAEQA,MAAOmB,EAFf,EAEeA,QAAS1K,EAFxB,EAEwBA,QACxB5M,EAAOmG,KAAKnG,MAAQ,GAEpBsE,EAAQ,cAAC,IAAD,CAAQzF,KAAK,UAAUwJ,QAAS,WAC1C,EAAKrI,KAAO,KACZ,EAAK4H,SAAS,CAAC0P,SAAS,KAFd,yBAKd,OACI,eAAC,KAAD,CAAMhT,MAAOA,EAAb,UACI,cAAC,KAAD,CACIiK,QAASpI,KAAKoI,QACde,OAAO,MACPC,UAAQ,EACRC,WAAY,CACRnC,gBf1JC,Ee2JDoC,iBAAiB,GAErBJ,WAAYgI,EACZzK,QAASA,IAIb,cAAC,KAAD,CACItI,MAAOtE,EAAKC,IAAM,cAAgB,cAClCkM,QAASmL,EACTnP,KAAMhC,KAAKuR,gBACXtL,SAAU,WACN,EAAKnK,KAAK6I,QAAQC,cAClB,EAAKnD,SAAS,CAAC0P,SAAS,IACxB,EAAKtX,KAAO,MAEhB6X,gBAAc,EATlB,SAWI,cAAC,GAAD,CACIhP,QAAS,SAAA5G,GAAI,OAAI,EAAKA,KAAOA,GAC7BkU,MAAOA,EACPnW,KAAMA,a,GAzKcyG,aCOpCqR,GAA2BC,IAA3BD,OAAQE,GAAmBD,IAAnBC,MAAOC,GAAYF,IAAZE,QAEFC,G,uKAGb,IAAMlY,EAAOkC,EAAYlC,KAEzB,OAAKA,GAASA,EAAKC,IAMf,eAAC,IAAD,CAAQgK,MAAO,CAACmJ,UAAU,QAA1B,UACI,cAAC4E,GAAD,CAAO/N,MAAO,CAACkO,OAAQ,MAAvB,SACI,cAAC,GAAD,MAEJ,eAAC,IAAD,CAAQlO,MAAO,CAACmO,SAAU,KAA1B,UACI,cAAC,GAAD,qBACA,cAACH,GAAD,CAAShO,MAAO,CAACgF,OAAQ,GAAIoJ,gBAAiB,WAA9C,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO3S,KAAK,QAAQwI,UAAW3F,KAC/B,cAAC,IAAD,CAAO7C,KAAK,YAAYwI,UAAWoK,KACnC,cAAC,IAAD,CAAO5S,KAAK,UAAUwI,UAAWF,KACjC,cAAC,IAAD,CAAOtI,KAAK,qBAAqBwI,UAAWmH,KAC5C,cAAC,IAAD,CAAO3P,KAAK,mBAAmBwI,UAAWkJ,KAC1C,cAAC,IAAD,CAAO1R,KAAK,mBAAmBwI,UAAWgI,KAC1C,cAAC,IAAD,CAAU/T,GAAG,eAGrB,cAAC2V,GAAD,CAAQ7N,MAAO,CAACsO,UAAW,UAA3B,uCArBD,cAAC,IAAD,CAAUpW,GAAG,e,GAPGsE,aCRd+R,G,uKAGjB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO9S,KAAK,SAASwI,UAAWtM,IAChC,cAAC,IAAD,CAAO8D,KAAK,IAAIwI,UAAWgK,c,GAPJzR,aCA3BzG,GAAO+C,IACbb,EAAYlC,KAAOA,GAGnByY,IAAS/J,OAAO,cAAC,GAAD,IAASgK,SAASC,eAAe,W","file":"static/js/main.b04600ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.9328371b.png\";","/*\r\n    Function module that can send asynchronous ajax requests\r\n    Package axios library\r\n    The return value of the function is a Promise object\r\n*/\r\n\r\nimport axios from 'axios';\r\nimport {message} from 'antd';\r\n\r\nexport default function ajax(url, data={}, type='GET') {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let promise;\r\n        // Execute asynchronous ajax requests\r\n        if (type==='GET') {\r\n            promise =  axios.get(url, {\r\n                params: data\r\n            });\r\n        } else {\r\n            promise =  axios.post(url, data);\r\n        }\r\n        promise.then(response => { // If succeeded, invoke resolve(value)\r\n            resolve(response);\r\n        }).catch(error => { // If failed, prompt exception messages instead of invoking reject(value)\r\n            message.error('Request error: ' + error.message);\r\n        });\r\n    });\r\n\r\n    \r\n}\r\n\r\najax('/login', {username: 'WenlongLu', password: '0604'}, 'POST').then();\r\n\r\n// add user\r\najax('/management/user/add', {username: 'WenlongLu', password: '0604', notes: 'This is me' }, 'POST').then();\r\n\r\n\r\n","/*\r\n    Includes modules for all interface request functions in the application\r\n    The return value of each function is a Promise\r\n*/\r\n\r\nimport ajax from './ajax';\r\n\r\nconst BASE = '';\r\n\r\n// login\r\n// export function reqLogin(username, password) {\r\n//     ajax('/login', {username, password}, 'POST');\r\n// }\r\nexport const reqLogin = (username, password) => ajax(BASE + '/login', {username, password}, 'POST');\r\n\r\n// Add or Update user\r\nexport const reqAddOrUpdateUser = (user) => ajax(BASE + '/management/user/' + (user._id ? 'update' : 'add'), user, 'POST');\r\n\r\n// Get members paging list\r\nexport const reqMembers = (pageNum, pageSize) => ajax(BASE + '/management/member/list', {pageNum, pageSize});\r\n\r\n// Search members paging list\r\nexport const reqSearchMembers = ({pageNum, pageSize, searchName, searchType}) => ajax(BASE + '/management/member/search', {\r\n    pageNum,\r\n    pageSize,\r\n    searchName,\r\n    searchType\r\n});\r\n\r\n// Delete the specified image\r\nexport const reqDeleteImg = (name) => ajax(BASE + '/management/member/image/delete', {name}, 'POST');\r\n\r\n// Add/Update Member\r\nexport const reqAddOrUpdateMember = (member) => ajax(BASE + '/management/member/' + (member._id ? 'update' : 'add'), member, 'POST');\r\n\r\n// Delete member\r\nexport const reqDeleteMember = (member) => ajax(BASE + '/management/member/delete', member, 'POST');\r\n\r\n// Get the role list\r\nexport const reqRoles = () => ajax(BASE + '/management/role/list');\r\n\r\n// Add new role\r\nexport const reqAddRole = (roleName) => ajax(BASE + '/management/role/add', {roleName}, 'POST');\r\n\r\n// Set role permissions\r\nexport const reqSetRolePermissions = (role) => ajax('/management/role/update', role, 'POST');\r\n\r\n// Delete role\r\nexport const reqDeleteRole = (role) => ajax(BASE + '/management/role/delete', role, 'POST');\r\n\r\n// Get the user list\r\nexport const reqUsers = () => ajax(BASE + '/management/user/list');\r\n\r\n// Delete user\r\nexport const reqDeleteUser = (userId) => ajax(BASE + '/management/user/delete', {userId}, 'POST');\r\n\r\n// Get events list\r\nexport const reqEvents = () => ajax(BASE + '/calendar/events');\r\n\r\n// Add new event\r\nexport const reqAddEvent = (events) => ajax(BASE + '/calendar/add', events, 'POST');","/**\r\n * Tool module for storing some data in memory\r\n */\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    user: {} // Save the currently logged user\r\n}","/**\r\n * Tool module for local data storage management\r\n */\r\nimport store from 'store';\r\n\r\nconst USER_KEY = 'user_key';\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n\r\n    saveUser (user) {\r\n        //localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n        store.set(USER_KEY, user);\r\n    },\r\n\r\n    getUser () {\r\n        //return JSON.parse(localStorage.getItem(USER_KEY) || '{}');\r\n        return store.get(USER_KEY) || {};\r\n    },\r\n\r\n    removeUser () {\r\n        //localStorage.removeItem(USER_KEY);\r\n        store.remove(USER_KEY);\r\n    }\r\n\r\n }","import React from 'react';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nimport './login.less';\r\nimport logo from '../../assets/images/logo.png';\r\nimport {reqLogin} from '../../api';\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport memoryUtils from '../../utils/memoryUtils';\r\nimport storageUtils from '../../utils/storageUtils';\r\n\r\nconst Login = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const user = memoryUtils.user;\r\n    if (user && user._id) {\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    // \"values\" includes an array of all form data\r\n    const onFinish = values => {\r\n        \r\n        // console.log('Received values of form: ',values);\r\n        form.validateFields()\r\n            .then(async values => {\r\n                //console.log(values);\r\n                // Login request\r\n                const {username, password} = values;\r\n                const response = await reqLogin(username, password);\r\n                //console.log('Request Success', response.data);\r\n                const result = response.data; // {status: 0, data: user} {status: 1, msg: 'xxx'}\r\n                if (result.status===0) { // Login successfully\r\n                    message.success('Login successfully!');\r\n                    const user = result.data;\r\n                    memoryUtils.user = user; // Save the user in the memory\r\n                    storageUtils.saveUser(user); // Save the user into local memory\r\n                    // Jump to another screen (no need to go back to Login page)\r\n                    history.replace('/');\r\n                } else { // Login failed\r\n                    message.error(result.msg);\r\n                }\r\n            })\r\n            .catch(errorInfo => {\r\n                console.log(errorInfo);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <header className=\"login-header\">\r\n                <img src={logo} alt=\"logo\"/>\r\n                <h1>RNG E-Sports Club</h1>\r\n            </header>\r\n            <section className=\"login-content\">\r\n                <h2>Login</h2>\r\n                <Form className=\"login-form\" onFinish={onFinish} form={form}>\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[\r\n                            { required: true, message: 'Please input your Username!' },\r\n                            { min: 4, message: 'Username must be at least 4 characters!'},\r\n                            { max: 12, message: 'Username can be at most 12 characters!'},\r\n                            { pattern: /^[a-zA-Z0-9_]+$/, message: 'Username must consist of letters, numbers or underscores!'},\r\n                        ]}\r\n                    >\r\n\r\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item \r\n                        name=\"password\" \r\n                        rules={[\r\n                            { required: true, message: 'Please input your Password!' },\r\n                            {\r\n                                validator: (_, value) => {\r\n                                    //console.log('validator()', value);\r\n                                    if (!value) {\r\n                                        return Promise.reject(\"Password must be entered!\");\r\n                                    } else if (value.length<4) {\r\n                                        return Promise.reject(\"Password cannot be less than 4 characters!\");\r\n                                    } else if (value.length>12) {\r\n                                        return Promise.reject(\"Password cannot be more than 12 characters!\");\r\n                                    } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\r\n                                        return Promise.reject(\"Password must consist of letters, numbers or underscores!\");\r\n                                    } else {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                }\r\n                            },                        \r\n                        ]}\r\n                    >\r\n                        \r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"Password\" />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </section>\r\n        </div>\r\n    );\r\n    \r\n\r\n}\r\n\r\nexport default Login;","import {\r\n    HomeOutlined,\r\n    ScheduleOutlined,\r\n    TeamOutlined,\r\n    BarsOutlined\r\n  } from '@ant-design/icons';\r\n\r\nconst menuList = [\r\n    {\r\n        title: 'Homepage: Team',\r\n        key: 'homepage',\r\n        icon: <HomeOutlined />,\r\n        route: '/home',\r\n        isPublic: true\r\n    },\r\n    {\r\n        title: 'Calendar',\r\n        key: 'calendar',\r\n        icon: <ScheduleOutlined />,\r\n        route: '/calendar'\r\n    },\r\n    {\r\n        title: 'Members',\r\n        key: 'member',\r\n        icon: <TeamOutlined />,\r\n        route: '/member'\r\n    },\r\n    {\r\n        title: 'Management',\r\n        key: 'management',\r\n        icon: <BarsOutlined />,\r\n        route: '/management',\r\n        children: [\r\n            {\r\n                title: 'Members Management',\r\n                key: 'member management',\r\n                route: '/management/member'\r\n            },\r\n            {\r\n                title: 'User Management',\r\n                key: 'user management',\r\n                route: '/management/user'\r\n            },\r\n            {\r\n                title: 'Role Management',\r\n                key: 'role management',\r\n                route: '/management/role'\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport default menuList;","import React, {Component} from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Menu } from 'antd';\r\n// import {\r\n//     HomeOutlined,\r\n//     ScheduleOutlined,\r\n//     TeamOutlined,\r\n//     BarsOutlined\r\n//   } from '@ant-design/icons';\r\nimport './index.less';\r\nimport logo from '../../assets/images/logo.png';\r\nimport menuList from '../../config/menuConfig'; \r\nimport memoryUtils from '../../utils/memoryUtils';\r\n\r\nconst {SubMenu} = Menu;\r\nclass LeftNav extends Component {\r\n\r\n    // Identify whether the currently logged in user has permission to the item\r\n    hasAuth = (item) => {\r\n\r\n        const {route, isPublic} = item;\r\n        const menus = memoryUtils.user.role.menus;\r\n        const username = memoryUtils.user.username;\r\n        /*\r\n        1. If the current user is admin, return true\r\n        2. If the item is public\r\n        3. If the current user has permission to this item (whether 'route' is in the array 'menus')\r\n        */\r\n        if (username==='admin' || isPublic || menus.indexOf(route)!==-1) {\r\n            return true;\r\n        } else if (item.children) { // 4. It the current user has permission to the sub-item of this item\r\n            return !!item.children.find(child => menus.indexOf(child.route)!==-1);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // getMenuNodes_map = (menuList) => {\r\n    //     return menuList.map(item => {\r\n    //         if (!item.children) {\r\n    //             return (\r\n    //                 <Menu.Item key={item.key} icon={item.icon}>\r\n    //                     <Link to={item.route}>\r\n    //                         {item.title}\r\n    //                     </Link>\r\n    //                 </Menu.Item>\r\n    //             );\r\n    //         } else {\r\n    //             return (\r\n    //                 <SubMenu key={item.key} icon={item.icon} title={item.title}>\r\n    //                     {this.getMenuNodes(item.children)}\r\n    //                 </SubMenu>\r\n    //             );\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    getMenuNodes = (menuList) => {\r\n\r\n        const path = this.props.location.pathname;\r\n\r\n        return menuList.reduce((pre, item) => {\r\n\r\n            // If the current user has the permission to the item, then display that item of the menu\r\n            if (this.hasAuth(item)) {\r\n                if (!item.children) {\r\n                    pre.push((\r\n                        <Menu.Item key={item.key} icon={item.icon}>\r\n                            <Link to={item.route}>\r\n                                {item.title}\r\n                            </Link>\r\n                        </Menu.Item>\r\n                    ));\r\n                } else {\r\n                    const cItem = item.children.find( cItem => path.indexOf(cItem.route)===0);\r\n                    if (cItem) {\r\n                        this.openKey = item.key\r\n                    }\r\n                    \r\n                    pre.push((\r\n                        <SubMenu key={item.key} icon={item.icon} title={item.title}>\r\n                            {this.getMenuNodes(item.children)}\r\n                        </SubMenu>\r\n                    ));\r\n                }\r\n            }\r\n\r\n            return pre;\r\n        }, []);\r\n    }\r\n\r\n    // Execute only once before the first render()\r\n    UNSAFE_componentWillMount () {\r\n        this.menuNodes = this.getMenuNodes(menuList);\r\n    }\r\n\r\n    render () {\r\n\r\n        let path = this.props.location.pathname;\r\n        const openKey = this.openKey;\r\n        if (path.indexOf('member')===0) { // The current request is for a member or its subrouting interface\r\n            path = '/member';\r\n        }\r\n\r\n        return (\r\n                <div className=\"left-nav\">\r\n                    <Link to='/' className=\"left-nav-header\">\r\n                        <img src={logo} alt=\"logo\"/>\r\n                    </Link>\r\n\r\n                    <Menu\r\n                        defaultOpenKeys={[openKey]}\r\n                        selectedKeys={[path]}\r\n                        mode=\"inline\"\r\n                        theme=\"dark\"\r\n                        >\r\n                        {/* <Menu.Item key=\"/home\" icon={<HomeOutlined />}>\r\n                            <Link to='/home'>\r\n                                Homepage: Team\r\n                            </Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"/calendar\" icon={<ScheduleOutlined />}>\r\n                            <Link to='/calendar'>\r\n                                Calendar\r\n                            </Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"/member\" icon={<TeamOutlined />}>\r\n                            <Link to='/member'>\r\n                                Members\r\n                            </Link>\r\n                        </Menu.Item>\r\n                        <SubMenu key=\"Management\" icon={<BarsOutlined />} title=\"Management\">\r\n                            <Menu.Item key=\"/management/member\" >\r\n                                <Link to='/management/member'>\r\n                                    Members Management\r\n                                </Link>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"/management/user\" >\r\n                                <Link to='/management/user'>\r\n                                    User Management\r\n                                </Link>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"/management/role\" >\r\n                                <Link to='/management/role'>\r\n                                    Role Management\r\n                                </Link>\r\n                            </Menu.Item>\r\n                        </SubMenu> */}\r\n                        \r\n                        {\r\n                            this.menuNodes\r\n                        }\r\n\r\n                    </Menu>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(LeftNav);","export function formatDate(time) {\r\n    if (!time) return '';\r\n    let date = new Date(time);\r\n    return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n}","import React, {Component} from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Modal, Button } from 'antd';\r\nimport { ExclamationCircleOutlined, LogoutOutlined } from '@ant-design/icons';\r\nimport './index.less';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport memoryUtils from '../../utils/memoryUtils';\r\nimport storageUtils from '../../utils/storageUtils';\r\nimport menuList from '../../config/menuConfig';\r\nclass Header extends Component {\r\n\r\n    state = {\r\n        currentTime: formatDate(Date.now()), // String of current time\r\n    }\r\n\r\n    getTime = () => {\r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = formatDate(Date.now());\r\n            this.setState({currentTime});\r\n        }, 1000);\r\n    }\r\n\r\n    getTitle = () => {\r\n        const path = this.props.location.pathname;\r\n        let title;\r\n        menuList.forEach(item => {\r\n            if (item.route===path) {\r\n                title = item.title;\r\n            } else if (item.children) {\r\n                const cItem = item.children.find(cItem => path.indexOf(cItem.route)===0);\r\n                if (cItem) {\r\n                    title = cItem.title\r\n                }\r\n            }\r\n        });\r\n        return title;\r\n    }\r\n\r\n    // Execute once after the first execution of render()\r\n    // Send ajax request or launch timer\r\n    componentDidMount() {\r\n        this.getTime();\r\n    }\r\n\r\n    // Called before the current component is unloaded\r\n    componentWillUnmount () {\r\n        // Clear Timer\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    // Logout the current account\r\n    logout = () => {\r\n        Modal.confirm({\r\n            title: 'Do you want to logout?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            onOk: () => {\r\n                // Remove the stored data of user\r\n                storageUtils.removeUser();\r\n                memoryUtils.user = {};\r\n                this.props.history.replace('/login');\r\n            }\r\n        });\r\n    }   \r\n\r\n    render () {\r\n\r\n        const {currentTime} = this.state;\r\n\r\n        const username = memoryUtils.user.username;\r\n\r\n        const title =  this.getTitle();\r\n\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header-top\">\r\n                    <span>Welcome, {username}</span>\r\n                    <Button className=\"header-top-button\" onClick={this.logout} icon={<LogoutOutlined />} type=\"link\">Logout</Button>\r\n                </div>\r\n                <div className=\"header-bottom\">\r\n                    <div className=\"header-bottom-left\">{title}</div>\r\n                    <div className=\"header-bottom-right\">\r\n                        <span>{currentTime}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Header);","import React, {Component} from 'react';\r\n\r\nexport default class Home extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                Home\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport './event-form.less';\r\n\r\nconst {List, Item} = Form;\r\n\r\nexport default class EventForm extends Component {\r\n\r\n    formRef = React.createRef();\r\n\r\n    static propTypes = {\r\n        setForm: PropTypes.func.isRequired,\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.props.setForm(this.formRef);\r\n    }\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n              xs: { span: 24 },\r\n              sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n              xs: { span: 24 },\r\n              sm: { span: 20 },\r\n            },\r\n        };\r\n\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n              xs: { span: 24, offset: 0 },\r\n              sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form ref={this.formRef} {...formItemLayoutWithOutLabel}>\r\n                <List \r\n                    name=\"events\"\r\n                >\r\n                    {(fields, { add, remove }, { errors }) => (\r\n                        <>\r\n                            {fields.map((field, index) => (\r\n                                <Item\r\n                                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                    label={index === 0 ? 'Events' : ''}\r\n                                    required={false}\r\n                                    key={field.key}\r\n                                >\r\n                                    <Item\r\n                                        {...field}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                            required: true,\r\n                                            whitespace: true,\r\n                                            message: \"Please input the event or delete this field.\",\r\n                                            },\r\n                                        ]}\r\n                                        noStyle\r\n                                    >\r\n                                        <Input placeholder=\"Event\" style={{ width: '60%' }} />\r\n                                    </Item>\r\n                                    {fields.length > 1 ? (\r\n                                        <MinusCircleOutlined\r\n                                            className=\"dynamic-delete-button\"\r\n                                            onClick={() => remove(field.name)}\r\n                                        />\r\n                                    ) : null}\r\n                                </Item>\r\n                            ))}\r\n                            <Item key=\"newEvent\">\r\n                                <Button\r\n                                    type=\"dashed\"\r\n                                    onClick={() => add()}\r\n                                    style={{ width: '60%' }}\r\n                                    icon={<PlusOutlined />}\r\n                                >\r\n                                    Add new event\r\n                                </Button>\r\n                                <Form.ErrorList errors={errors} />\r\n                            </Item>\r\n                        </>\r\n                    )}\r\n                </List>\r\n            </Form>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Calendar, Badge, Alert, Button, Modal, message } from 'antd';\r\nimport moment from 'moment';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport EventForm from './event-form';\r\nimport { reqAddEvent, reqEvents } from '../../api';\r\nimport memoryUtils from '../../utils/memoryUtils';\r\n\r\nexport default class TeamCalendar extends Component {\r\n\r\n  state = {\r\n    value: moment(formatDate(Date.now())),\r\n    selectedValue: moment(formatDate(Date.now())),\r\n    isShownEventForm: false,\r\n    allEvents: []\r\n  };\r\n\r\n  onSelect = value => {\r\n    this.setState({\r\n      value,\r\n      selectedValue: value\r\n    });\r\n  }\r\n    \r\n  onPanelChange = value => {\r\n    this.setState({\r\n      value\r\n    });\r\n  }\r\n\r\n  addEvent = () => {\r\n    this.form.current.validateFields()\r\n      .then( async values => {\r\n        this.setState({\r\n          isShownEventForm: false\r\n        });\r\n        // console.log(values)\r\n        // console.log(this.state.value)\r\n        // console.log(this.state.selectedValue)\r\n        // console.log(this.state.selectedValue.date())\r\n\r\n        // let eventsList = [];\r\n        // for (let i = 0; i < values.events.length; i++) {\r\n        //   eventsList.push({date: this.state.selectedValue.date(), type: 'success', content: values.events[i]});            \r\n        // }\r\n        this.form.current.resetFields();\r\n\r\n        const {events} = values;\r\n        const eventsToAdd = {date: this.state.selectedValue, eventList: events};\r\n        const result = await reqAddEvent(eventsToAdd);\r\n        if (result.data.status===0) {\r\n          message.success('Successfully added events!');\r\n          this.getEvents();\r\n        } else {\r\n          message.error('Failed to add events.');\r\n        }\r\n        \r\n      })\r\n      .catch(errorInfo => {  \r\n        console.log(errorInfo);\r\n      });\r\n  }\r\n\r\n  getEvents = async () => {\r\n    const result = await reqEvents();\r\n    //console.log(result.data.data[0].date)\r\n    //console.log(moment(formatDate(result.data.data[0].date)).month())\r\n\r\n    if (result.data.status===0) {\r\n      const allEvents = result.data.data;\r\n      this.setState({\r\n        allEvents\r\n      });\r\n      //console.log(allEvents)\r\n      //console.log(this.state.allEvents);\r\n    }\r\n    \r\n  }\r\n\r\n  isAbleToEditCalendar() {\r\n    //console.log(memoryUtils.user.role.menus.indexOf('/management') > -1)\r\n    if (memoryUtils.user.username === 'admin') return true;\r\n    else if (memoryUtils.user.role.menus.indexOf('/management') > -1) return true;\r\n    else return false;\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.getEvents();\r\n  }\r\n\r\n  render () {\r\n    \r\n    const { value, selectedValue, isShownEventForm, allEvents } = this.state;  \r\n\r\n    function getListData(value) {\r\n      let listData = [];\r\n      // console.log(value.year())\r\n      // console.log(value.month()+1)\r\n      // console.log(value.date())\r\n      // console.log(allEvents.length)\r\n      // console.log(allEvents[0] ? moment(formatDate(allEvents[0].date)).date() : [])\r\n      allEvents.map(item => {\r\n        if (value.year() === item ? moment(formatDate(item.date)).year() : []) {\r\n          if (value.month() === moment(formatDate(item.date)).month()) {\r\n            if (value.date() === moment(formatDate(item.date)).date()) {\r\n              for (let i = 0; i < item.eventList.length; i++) {\r\n                listData.push({content: item.eventList[i]});\r\n              }\r\n            }\r\n          }\r\n        }\r\n        //console.log(listData)\r\n        return listData || [];\r\n      });\r\n      return listData || [];\r\n    }\r\n      \r\n    function dateCellRender(value) {\r\n      const listData = getListData(value);\r\n      //console.log(listData)\r\n      return (\r\n        <ul className=\"events\">\r\n          {listData.map(item => (\r\n            <li key={item.content}>\r\n              <Badge color={'#' + Math.random().toString(16).substr(2, 6)} text={item.content} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }    \r\n            \r\n    return (\r\n      <>\r\n        <Alert message={`You selected date: ${selectedValue && selectedValue.format('YYYY-MM-DD')}`}/>\r\n        <Button type='primary' disabled={!this.isAbleToEditCalendar()} onClick={() => this.setState({isShownEventForm: true})}>Edit Events</Button>\r\n        <Calendar \r\n          dateCellRender={dateCellRender} \r\n          value={value}\r\n          onSelect={this.onSelect}\r\n          onPanelChange={this.onPanelChange}\r\n        />\r\n        <Modal\r\n          title='Edit Event'\r\n          visible={isShownEventForm}\r\n          onOk={this.addEvent}\r\n          onCancel={() => {\r\n              this.setState({\r\n                isShownEventForm: false\r\n              });\r\n              this.form.current.resetFields();\r\n          }}\r\n      >\r\n          <EventForm\r\n              setForm={(form) => this.form = form}\r\n          />\r\n      </Modal>  \r\n      </>\r\n    );\r\n  }\r\n}","export const PAGE_SIZE = 3; \r\nexport const BASE_IMAGE_URL = 'http://localhost:5000/upload/';","import React, {Component} from 'react';\r\nimport { Card, Pagination } from 'antd';\r\nimport {reqMembers} from '../../api';\r\nimport {PAGE_SIZE} from '../../utils/constants';\r\nimport {BASE_IMAGE_URL} from '../../utils/constants';\r\n\r\n\r\nconst { Meta } = Card;\r\nexport default class Members extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            minValue: 0,\r\n            maxValue: 3\r\n        };\r\n    }\r\n\r\n    state = {\r\n        total: 0,\r\n        members: [],\r\n    }\r\n\r\n    getMembers = async (pageNum) => {\r\n        this.pageNum = pageNum;\r\n        this.setState({loading: true});\r\n        const result = await reqMembers(pageNum, PAGE_SIZE);\r\n\r\n        this.setState({loading: false});\r\n        if (result.data.status===0) {\r\n            const {total, list} = result.data.data;\r\n            this.setState({\r\n                total,\r\n                members: list\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getMembers(1);\r\n    }\r\n\r\n    render () {\r\n\r\n        const { members, total } = this.state;\r\n\r\n        return (\r\n            <>\r\n                {members && total>0 && members.slice(this.state.minValue, this.state.maxValue).map(member => (\r\n                    <Card\r\n                        hoverable\r\n                        style={{ width: 240 }}\r\n                        cover={<img alt=\"img\" src={BASE_IMAGE_URL + member.photo[0]} />}\r\n                        onClick={() => this.props.history.push('/member/details', {member})}\r\n                    >\r\n                        <Meta title={member.name} />\r\n                    </Card>\r\n                ))}\r\n                <Pagination\r\n                    defaultCurrent={1}\r\n                    defaultPageSize={3}\r\n                    onChange={this.getMembers}\r\n                    total={total}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Button, Card } from 'antd';\r\nimport {ArrowLeftOutlined} from '@ant-design/icons';\r\nimport {BASE_IMAGE_URL} from '../../utils/constants';\r\n\r\n\r\nexport default class Details extends Component {\r\n    render () {\r\n\r\n        // const {name, nickname, position, gender, dob, nationality, phone, address, photo=[], details} = this.props.location.state.member;\r\n\r\n        const {photo=[], details} = this.props.location.state.member;\r\n\r\n        const title = (\r\n            <span>\r\n                <Button \r\n                type='link' \r\n                icon={<ArrowLeftOutlined style={{color: '#B49169', marginRight: 5, fontSize: 20}}/>}\r\n                onClick={() => this.props.history.goBack()}\r\n                >\r\n                </Button>\r\n                <span>Member details</span>\r\n            </span>\r\n        );\r\n        \r\n        return (\r\n            <Card title={title}>\r\n                <span>\r\n                    {\r\n                        photo.map(img => (\r\n                            <img\r\n                                key={img}\r\n                                className=\"member-image\"\r\n                                src={BASE_IMAGE_URL + img}\r\n                                alt=\"img\"\r\n                            />\r\n                        ))\r\n                    }\r\n                </span>\r\n\r\n                <span dangerouslySetInnerHTML={{__html: details}}></span>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Switch, Route, Redirect} from 'react-router-dom';\r\n\r\nimport Members from './index';\r\nimport Details from './details';\r\n\r\n\r\n\r\nexport default class Member extends Component {\r\n    render () {\r\n        return (\r\n            <Switch>\r\n                <Route exact path='/member' component={Members}/>\r\n                <Route path='/member/details' component={Details}/>\r\n                <Redirect to='/member'/>\r\n            </Switch>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Card, Input, Button, Table, Space, Select, Popconfirm, message } from 'antd';\r\nimport { PlusOutlined, SearchOutlined } from '@ant-design/icons';\r\n\r\nimport {reqDeleteMember, reqMembers, reqSearchMembers} from '../../api';\r\nimport {PAGE_SIZE} from '../../utils/constants';\r\n\r\nconst Option = Select.Option;\r\nexport default class MembersList extends Component {\r\n\r\n    state = {\r\n        total: 0, // Number of members\r\n        members: [\r\n            // {\r\n            //     name: 'Yuanhao Li',\r\n            //     nickname: 'Xiaohu',\r\n            //     position: 'Player',\r\n            //     gender: 'Male',\r\n            //     dob: '1998-01-28',\r\n            //     nationality: 'China',\r\n            //     phone: '',\r\n            //     address: 'Shanghai',\r\n            //     photo: [\"image-1615697506989.jpg\"],\r\n            //     _id: \"safff1f11f1f1\"\r\n            // }\r\n        ],\r\n        loading: false,\r\n        searchName: '',\r\n        searchType: 'memberName',\r\n    }\r\n\r\n    // Initialize the array of the table columns\r\n    initColumns = () => {\r\n        this.columns = [\r\n            {\r\n              title: 'Name',\r\n              dataIndex: 'name',\r\n            },\r\n            {\r\n              title: 'Nickname',\r\n              dataIndex: 'nickname',\r\n            },\r\n            {\r\n              title: 'Position',\r\n              dataIndex: 'position',\r\n            },\r\n            \r\n            {\r\n              width: 200,\r\n              align: 'center',\r\n              title: 'Action',\r\n              render: (member) => (\r\n                <Space>\r\n                    <Button type='link' onClick={() => this.props.history.push('/management/member/details', {member})}>Details</Button>\r\n                    <Button type='link' onClick={() => member ? this.props.history.push('/management/member/operations?member=' + JSON.stringify(member)) : this.props.history.push('/management/member/operations')}>Edit</Button>\r\n                    <Popconfirm\r\n                        title=\"Are you sure to delete this member?\"\r\n                        onConfirm={async() => {\r\n                            const result = await reqDeleteMember(member);\r\n                            if (result.data.status===0) {\r\n                                message.success('Successfully deleted the member!');\r\n                            } else {\r\n                                message.error('Failed to delete the member.');\r\n                            }\r\n                            this.getMembers(1);\r\n                        }}\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                    >\r\n                        <Button \r\n                            type='link' \r\n                            style={{color: \"red\"}} \r\n                            // onClick={() => {\r\n                            //     //console.log(member)\r\n                            //     //console.log(member._id)\r\n                            //     reqDeleteMember(member)\r\n                            //     this.getMembers(1)\r\n                            // }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Popconfirm>\r\n                </Space>\r\n              ),\r\n            },\r\n          ];\r\n    }\r\n\r\n    // Get the list of specified page number\r\n    getMembers = async (pageNum) => {\r\n        this.pageNum = pageNum;\r\n        this.setState({loading: true});\r\n        const {searchName, searchType} = this.state;\r\n        let result;\r\n        if (searchName) {\r\n            result = await reqSearchMembers({pageNum, pageSize: PAGE_SIZE, searchName, searchType});\r\n            // console.log(searchName)\r\n            // console.log(searchType)\r\n            // console.log(searchType==='memberName')\r\n            // console.log(result)\r\n        } else {\r\n            result = await reqMembers(pageNum, PAGE_SIZE);\r\n            //console.log(result)\r\n        }\r\n        this.setState({loading: false});\r\n        //console.log(result.status)\r\n        //console.log(result.data)\r\n        //console.log(result.data.data)\r\n        //console.log(result.data.data.list)  \r\n        if (result.data.status===0) {\r\n            const {total, list} = result.data.data;\r\n            this.setState({\r\n                total,\r\n                members: list\r\n            });\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.initColumns();\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getMembers(1); // the 1st page\r\n    }\r\n\r\n    render () {\r\n\r\n        const { members, total, loading, searchName, searchType } = this.state;\r\n\r\n        const title = (\r\n            <span>\r\n                <Select \r\n                value={searchType} \r\n                style={{width: 200}} \r\n                onChange={value => this.setState({searchType:value})}\r\n                >\r\n                    <Option value='memberName'>Search by Name</Option>\r\n                    <Option value='memberNickname'>Search by Nickname</Option>\r\n                    <Option value='memberPosition'>Search by Postion</Option>\r\n                </Select>\r\n                <Input \r\n                placeholder='keyword' \r\n                prefix={<SearchOutlined />} \r\n                style={{width: 100, margin: '0 10px'}} \r\n                value={searchName}\r\n                onChange={event => this.setState({searchName:event.target.value})}\r\n                />\r\n                <Button type='primary' onClick={() => this.getMembers(1)}>Search</Button>\r\n            </span>\r\n        );\r\n        \r\n        const extra = (\r\n            <Button type='primary' icon={<PlusOutlined />} onClick={() => this.props.history.push('/management/member/operations')}>\r\n                New Member\r\n            </Button>\r\n        );\r\n\r\n        return (\r\n            <Card title={title} extra={extra}>\r\n                <Table \r\n                    columns={this.columns}\r\n                    dataSource={members}\r\n                    rowKey='_id'\r\n                    bordered\r\n                    pagination={{\r\n                        current: this.pageNum,\r\n                        defaultPageSize: PAGE_SIZE, \r\n                        showQuickJumper: true, \r\n                        total,\r\n                        onChange: this.getMembers\r\n                    }}\r\n                    loading={loading}\r\n                ></Table>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Upload, Modal, message } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport {reqDeleteImg} from '../../api'\r\nimport PropTypes from 'prop-types';\r\nimport { BASE_IMAGE_URL } from '../../utils/constants';\r\n\r\nfunction getBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n\r\nexport default class PicturesWall extends React.Component {\r\n\r\n  static propTypes = {\r\n    photo: PropTypes.array\r\n  }\r\n\r\n  state = {\r\n    previewVisible: false,\r\n    previewImage: '',\r\n    previewTitle: '',\r\n    fileList: [],\r\n  };\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    let fileList = [];\r\n\r\n    // If the photo attribute is passed in\r\n    const {photo} = this.props;\r\n    if (photo && photo.length>0) {\r\n      fileList = photo.map((img, index) => ({\r\n        uid: -index,\r\n        name: img,\r\n        status: 'done',\r\n        url: BASE_IMAGE_URL + img\r\n      }));\r\n    }\r\n\r\n    this.state = {\r\n      previewVisible: false,\r\n      previewImage: '',\r\n      fileList\r\n    }\r\n  }\r\n\r\n  // Get the array of names of all the uploaded images\r\n  getImages = () => {\r\n    return this.state.fileList.map(file => file.name);\r\n  }\r\n\r\n  handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n  handlePreview = async file => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n    this.setState({\r\n      previewImage: file.url || file.preview,\r\n      previewVisible: true,\r\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\r\n    });\r\n  };\r\n\r\n  // file: Image files for the current operation\r\n  // fileList: An array of all uploaded image file objects\r\n  handleChange = async ({ file, fileList }) => {\r\n    if (file.status==='done') {\r\n      const result = file.response;\r\n      if (result.status===0) {\r\n        message.success(\"Successfully uploaded the image!\");\r\n        const {name, url} = result.data;\r\n        file = fileList[fileList.length-1];\r\n        file.name = name;\r\n        file.url = url;\r\n      } else {\r\n        message.error(\"Failed to upload image.\");\r\n      }\r\n    } else if (file.status==='removed') {\r\n      const result = await reqDeleteImg(file.name);\r\n      if (result.data.status===0) {\r\n        message.success(\"Successfully deleted the image!\");\r\n      } else {\r\n        message.error(\"Failed to detele the image.\");\r\n      }\r\n    }\r\n\r\n    this.setState({ fileList });\r\n  };\r\n\r\n  render() {\r\n    const { previewVisible, previewImage, fileList, previewTitle } = this.state;\r\n    const uploadButton = (\r\n      <div>\r\n        <PlusOutlined />\r\n        <div style={{ marginTop: 8 }}>Upload</div>\r\n      </div>\r\n    );\r\n    return (\r\n      <>\r\n        <Upload\r\n          action=\"/management/member/image/upload\" // The address of the uploaded images\r\n          accept=\"image/*\" // Only accept image files\r\n          name=\"image\" // Parameter name of request\r\n          listType=\"picture-card\"\r\n          fileList={fileList}\r\n          onPreview={this.handlePreview}\r\n          onChange={this.handleChange}\r\n        >\r\n          {fileList.length >= 8 ? null : uploadButton}\r\n        </Upload>\r\n        <Modal\r\n          visible={previewVisible}\r\n          title={previewTitle}\r\n          footer={null}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default class RichTextEditor extends Component {\r\n\r\n    static propTypes = {\r\n        details: PropTypes.string\r\n    }\r\n\r\n    state = {\r\n        editorState: EditorState.createEmpty(), // Create a non-content editing object\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const html = this.props.details;\r\n        if (html) { // If it has a value, create a corresponding edit object based on an html format string\r\n            const contentBlock = htmlToDraft(html);\r\n            const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n            const editorState = EditorState.createWithContent(contentState);\r\n            this.state = {\r\n                editorState,\r\n            };\r\n        } else {\r\n            this.state = {\r\n                editorState: EditorState.createEmpty(), // Create a non-content editing object\r\n            }\r\n        }\r\n    }\r\n\r\n    // Real-time callbacks during input\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n        editorState,\r\n        });\r\n    };\r\n\r\n    getDetails = () => {\r\n        return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\r\n    }\r\n        /* <textarea\r\n            disabled\r\n            value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\r\n    /> */\r\n\r\n    uploadImageCallBack = (file) => {\r\n        return new Promise(\r\n          (resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open('POST', '/management/member/image/upload');\r\n            const data = new FormData();\r\n            data.append('image', file);\r\n            xhr.send(data);\r\n            xhr.addEventListener('load', () => {\r\n              const response = JSON.parse(xhr.responseText);\r\n              const url = response.data.url; // Get the url of the image\r\n              resolve({data: {link: url}});\r\n            });\r\n            xhr.addEventListener('error', () => {\r\n              const error = JSON.parse(xhr.responseText);\r\n              reject(error);\r\n            });\r\n          }\r\n        );\r\n      }\r\n\r\n    render() {\r\n        const { editorState } = this.state;\r\n        return (\r\n        \r\n            <Editor\r\n            editorState={editorState}\r\n            editorStyle={{border: '1px solid black', minHeight: 200, paddingLeft: 10}}\r\n            onEditorStateChange={this.onEditorStateChange}\r\n            toolbar={{\r\n                image: { uploadCallback: this.uploadImageCallBack, alt: { present: true, mandatory: true } },\r\n            }}\r\n            />\r\n\r\n        );\r\n    }\r\n}","import React, { useRef } from 'react';\r\nimport { Card, Form, Input, Button, Radio, DatePicker, message } from 'antd';\r\nimport PicturesWall from './picturesWall';\r\nimport {ArrowLeftOutlined} from '@ant-design/icons';\r\nimport {useHistory} from 'react-router-dom';\r\nimport getQuery from '../../utils/urlUtils';\r\nimport moment from 'moment';\r\nimport RichTextEditor from './rich-text-editor';\r\nimport {reqAddOrUpdateMember} from '../../api';\r\n\r\nconst {Item} = Form;\r\nconst Operations = () => {\r\n\r\n    // Specify the configuration object for the Item layout\r\n    const formItemLayout = {\r\n        labelCol: { span: 3 },\r\n        wrapperCol: { span: 8 }\r\n    }\r\n\r\n    let history = useHistory();\r\n    const [form] = Form.useForm();\r\n    \r\n    // eslint-disable-next-line no-unused-vars\r\n    const [value, setValue] = React.useState(1);\r\n    const onChange = e => {\r\n        //console.log('radio checked', e.target.value);\r\n        setValue(e.target.value);\r\n    };\r\n    \r\n    const pw = useRef();\r\n    if(!pw.current){\r\n        pw.current = value;\r\n    }\r\n\r\n    const editor = useRef();\r\n    if (!editor.current) {\r\n        editor.current = value;\r\n    }\r\n    \r\n    const member_ = getQuery('member');\r\n    const isUpdate = !!member_;\r\n    let member;\r\n    let _id;\r\n    if (isUpdate) {\r\n        member = JSON.parse(member_);\r\n        _id = member._id;\r\n    } else {\r\n        member = {};\r\n    }\r\n    const {photo} = member;\r\n    const {details} = member;\r\n    \r\n    const onFinish = values => {\r\n        form.validateFields()\r\n            .then(async values => {\r\n\r\n                //console.log(values)\r\n                // 1. Collect data and encapsulate it into a member object\r\n                const {name, nickname, position, gender, nationality, phone, address} = values;\r\n                let {dob} = values;\r\n                dob = moment(dob).format('YYYY-MM-DD');\r\n                //const dob = moment(moment_dob).format('YYYY-MM-DD');\r\n                //console.log(gender)\r\n                //console.log(dob)\r\n\r\n                const photo = pw.current.getImages();\r\n                const details = editor.current.getDetails();\r\n                const member = {name, nickname, position, gender, dob, nationality, phone, address, photo, details}\r\n                //console.log(member)\r\n                //console.log(isUpdate)\r\n\r\n                // If it's update, it needs to add the _id\r\n                if (isUpdate) {\r\n                    member._id = _id;\r\n                }\r\n\r\n                // 2. Invoke the interface request function to add/update\r\n                const result = await reqAddOrUpdateMember(member);\r\n                //console.log(result.status)\r\n\r\n                // 3. Give a hint based on the result\r\n                if (result.data.status===0) {\r\n                    message.success(`Successfully ${isUpdate ? 'updated' : 'added'} the member!`);\r\n                    history.goBack();\r\n                } else {\r\n                    message.error(`Failed to ${isUpdate ? 'update' : 'add'} the member.`);\r\n                }\r\n\r\n               //console.log(\"photos and details\", photo, details)\r\n            })\r\n            .catch(errorInfo => {  \r\n                console.log(errorInfo);\r\n            });\r\n    }\r\n\r\n    const title = (\r\n        <span>\r\n            <Button \r\n            type='link' \r\n            icon={<ArrowLeftOutlined style={{color: '#B49169', marginRight: 5, fontSize: 20}}/>}\r\n            onClick={() => history.goBack()}\r\n            >\r\n            </Button>\r\n            <span>{isUpdate ? \"Edit Member\" : \"Add New Member\"}</span>\r\n        </span>\r\n    );\r\n    \r\n    return (\r\n        <Card title={title}>\r\n            <Form {...formItemLayout} onFinish={onFinish} form={form}>\r\n                <Item label=\"Name\" initialValue={member.name} name='name' rules={[{required: true, message: 'Name must be entered!'}]}>\r\n                    <Input placeholder='Please input the name'/>\r\n                </Item>\r\n                <Item label=\"Nickname\" initialValue={member.nickname} name='nickname' rules={[{required: true, message: 'Nickname must be entered!'}]}>\r\n                    <Input placeholder='Please input the niclkname'/>\r\n                </Item>\r\n                <Item label=\"Position\" initialValue={member.position} name='position' rules={[{required: true, message: 'Position must be entered!'}]}>\r\n                    <Input placeholder='Please input the position'/>\r\n                </Item>\r\n                <Item label=\"Gender\" initialValue={member.gender} name='gender'>\r\n                    <Radio.Group name=\"radiogroup\" onChange={onChange} value={value}>\r\n                        <Radio value=\"Male\">Male</Radio>\r\n                        <Radio value=\"Female\">Female</Radio>\r\n                    </Radio.Group>\r\n                </Item>\r\n                <Item label=\"DoB\" initialValue={moment(member.dob)} name='dob'>\r\n                    <DatePicker />\r\n                </Item>\r\n                <Item label=\"Nationality\" initialValue={member.nationality} name='nationality'>\r\n                    <Input placeholder='Please input the nationality'/>\r\n                </Item>\r\n                <Item label=\"Phone No.\" initialValue={member.phone} name='phone'>\r\n                    <Input placeholder='Please input the phone number'/>\r\n                </Item>\r\n                <Item label=\"Address\" initialValue={member.address} name='address'>\r\n                    <Input placeholder='Please input the address'/>\r\n                </Item>\r\n                <Item label=\"Photo\" >\r\n                    <PicturesWall ref={pw} photo={photo} />\r\n                </Item>\r\n                <Item label=\"Details\" labelCol={{span: 3}} wrapperCol={{span:20}}>\r\n                    <RichTextEditor ref={editor} details={details} />\r\n                </Item>\r\n                <Item>\r\n                    <Button type='primary' htmlType='submit'>Submit</Button>\r\n                </Item>\r\n            </Form>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Operations;","export default function getQuery(name) {\r\n    \r\n    let reg = new RegExp(\"(^|&)\"+ name +\"=([^&]*)(&|$)\");\r\n    let r = window.location.search.substr(1).match(reg);//substr() 的参数指定的\r\n    if(r != null) {\r\n        return unescape(r[2]); \r\n    }\r\n        return null;\r\n  }\r\n  ","import React, {Component} from 'react';\r\nimport { Card, List, Button } from 'antd';\r\nimport {ArrowLeftOutlined} from '@ant-design/icons';\r\nimport {BASE_IMAGE_URL} from '../../utils/constants';\r\n\r\nconst Item = List.Item;\r\n\r\nexport default class Details extends Component {\r\n    render () {\r\n\r\n        const {name, nickname, position, gender, dob, nationality, phone, address, photo=[], details} = this.props.location.state.member;\r\n\r\n        const title = (\r\n            <span>\r\n                <Button \r\n                type='link' \r\n                icon={<ArrowLeftOutlined style={{color: '#B49169', marginRight: 5, fontSize: 20}}/>}\r\n                onClick={() => this.props.history.goBack()}\r\n                >\r\n                </Button>\r\n                <span>Member details</span>\r\n            </span>\r\n        );\r\n\r\n        return (\r\n            <Card title={title} className='member-details'>\r\n                <List>\r\n                    <Item>\r\n                        <span className=\"left\">Name:</span>\r\n                        <span>{name}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Nickname:</span>\r\n                        <span>{nickname}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Position:</span>\r\n                        <span>{position}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Gender:</span>\r\n                        <span>{gender}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">DoB:</span>\r\n                        <span>{dob}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Nationality:</span>\r\n                        <span>{nationality}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Phone No.:</span>\r\n                        <span>{phone}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Address:</span>\r\n                        <span>{address}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Photo:</span>\r\n                        <span>\r\n                            {\r\n                                photo.map(img => (\r\n                                    <img\r\n                                        key={img}\r\n                                        className=\"member-image\"\r\n                                        src={BASE_IMAGE_URL + img}\r\n                                        alt=\"img\"\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">Details:</span>\r\n                        <span dangerouslySetInnerHTML={{__html: details}}></span>\r\n                    </Item>\r\n                </List>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Switch, Route, Redirect} from 'react-router-dom';\r\n\r\nimport MembersList from './index';\r\nimport Operations from './operations';\r\nimport Details from './details';\r\n\r\nimport './memberManagement.less';\r\n\r\n\r\nexport default class MemberManagement extends Component {\r\n    render () {\r\n        return (\r\n            <Switch>\r\n                <Route exact path='/management/member' component={MembersList}/>\r\n                <Route path='/management/member/operations' component={Operations}/>\r\n                <Route path='/management/member/details' component={Details}/>    \r\n                <Redirect to='/management/member'/>\r\n            </Switch>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input } from 'antd';\r\n\r\nconst {Item} = Form;\r\n\r\nexport default class AddForm extends Component {\r\n\r\n    formRef = React.createRef();\r\n\r\n    static propTypes = {\r\n        setForm: PropTypes.func.isRequired,\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.props.setForm(this.formRef);\r\n    }\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n        labelCol: { span: 4 },  \r\n        wrapperCol: { span: 15 }, \r\n        }\r\n\r\n        return (\r\n            <Form ref={this.formRef}>\r\n                <Item \r\n                    label='Role Name' \r\n                    name='roleName'\r\n                    {...formItemLayout} \r\n                    initialValue='' \r\n                    rules={[{\r\n                        required: true, \r\n                        message: 'Role name must be entered!'\r\n                    }]}\r\n                >\r\n                    <Input placeholder='Please input the role name.' />\r\n                </Item>\r\n            </Form>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Tree } from 'antd';\r\nimport menuList from '../../config/menuConfig';\r\n\r\nconst {Item} = Form;\r\nconst {TreeNode} = Tree;\r\n\r\nexport default class Auth extends Component {\r\n\r\n    formRef = React.createRef();\r\n\r\n    static propTypes = {\r\n        role: PropTypes.object\r\n    }\r\n\r\n    // Generate the initial state according to the role passed in\r\n    constructor (props) {\r\n        super(props);\r\n        const {menus} = this.props.role;\r\n        this.state = {\r\n            checkedKeys: menus\r\n        }\r\n    }\r\n\r\n    // Provide a function for parent component to get the latest [menus]\r\n    getMenus = () => this.state.checkedKeys;\r\n\r\n    getTreeNodes = (menuList) => {\r\n        return menuList.reduce((pre, item) => {\r\n            pre.push(\r\n                <TreeNode title={item.title} key={item.route}>\r\n                    {item.children ? this.getTreeNodes(item.children) : null}\r\n                </TreeNode>\r\n            );\r\n            return pre;\r\n        }, []);\r\n    }\r\n\r\n    onCheck = checkedKeys => {\r\n        console.log('onCheck', checkedKeys);\r\n        this.setState({checkedKeys});\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.treeNodes = this.getTreeNodes(menuList);\r\n    }\r\n\r\n    // Update the state of \"checkedKeys\" according to the newly passed in role\r\n    // Invoke automatically when the component receives new attributes\r\n    UNSAFE_componentWillReceiveProps (nextProps) {\r\n        const menus = nextProps.role.menus;\r\n        this.setState({\r\n            checkedKeys: menus\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {role} = this.props;\r\n        const {checkedKeys} = this.state;\r\n\r\n        const formItemLayout = {\r\n        labelCol: { span: 4 },  \r\n        wrapperCol: { span: 15 }, \r\n        }\r\n\r\n        return (\r\n            <Form>\r\n                <Item label='Role Name' {...formItemLayout}>\r\n                    <Input value={role.name} disabled />\r\n                </Item>\r\n                <Tree\r\n                    checkable\r\n                    defaultExpandAll={true}\r\n                    checkedKeys={checkedKeys}\r\n                    onCheck={this.onCheck}\r\n                >\r\n                    <TreeNode title='System Permissions' key='0-0'>\r\n                        {this.treeNodes}\r\n                    </TreeNode>\r\n                </Tree>\r\n            </Form>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Card, Button, Table, Modal, message, Popconfirm } from 'antd';\r\nimport {PAGE_SIZE} from '../../utils/constants';\r\nimport { reqRoles, reqAddRole, reqSetRolePermissions, reqDeleteRole} from '../../api';\r\nimport AddForm from './add-form';\r\nimport AuthForm from './auth-form';\r\nimport memoryUtils from '../../utils/memoryUtils';\r\nimport storageUtils from '../../utils/storageUtils';\r\nimport {formatDate} from '../../utils/dateUtils';\r\n\r\nexport default class RoleManagement extends Component {\r\n\r\n    state = {\r\n        roles: [], // The list of all roles\r\n        role: {}, // The selected role\r\n        isShownAdd: false, // Display the adding interface or not\r\n        isShownAuth: false, //Display the permission setting interface or not\r\n        loading: false\r\n    }\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.auth = React.createRef();\r\n    }\r\n\r\n    initColumn = () => {\r\n        this.columns = [\r\n            {\r\n                title: 'Role Name',\r\n                dataIndex: 'name'\r\n            },\r\n            {\r\n                title: 'Create Time',\r\n                dataIndex: 'create_time',\r\n                render: formatDate\r\n            },\r\n            {\r\n                title: 'Authorization Time',\r\n                dataIndex: 'auth_time',\r\n                render: formatDate\r\n            },\r\n            {\r\n                title: 'Operator',\r\n                dataIndex: 'auth_name'\r\n            }\r\n        ];\r\n    }\r\n\r\n    getRoles = async () => {\r\n        this.setState({loading: true});\r\n        const result = await reqRoles();\r\n        this.setState({loading: false});\r\n        if (result.data.status===0) {\r\n            const roles = result.data.data;\r\n            this.setState({\r\n                roles\r\n            });\r\n        }\r\n    }\r\n\r\n    onRow = (role) => {\r\n        return {\r\n            onClick: event => {\r\n                //console.log('row onClick', role)\r\n                this.setState({\r\n                    role\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    addRole = () => {\r\n        // Validate the form\r\n        this.form.current.validateFields()\r\n            .then( async values => {\r\n\r\n                this.setState({\r\n                    isShownAdd: false\r\n                });\r\n\r\n                // Collect input data\r\n                const {roleName} = values;\r\n                this.form.current.resetFields();\r\n\r\n                // Request add new role\r\n                const result = await reqAddRole(roleName);\r\n\r\n                // Give a hint based on the result\r\n                if (result.data.status===0) {\r\n                    message.success('Successfully added the role!');\r\n                    this.getRoles();\r\n                    const role = result.data.data;\r\n                    // const roles = [...this.state.roles];\r\n                    // roles.push(role);\r\n                    // this.setState({\r\n                    //     roles\r\n                    // });\r\n                    this.setState(state => ({\r\n                        roles: [...state.roles, role]                        \r\n                    }));\r\n                } else {\r\n                    message.error('Failed to add new role');\r\n                }\r\n            })\r\n            .catch();\r\n\r\n\r\n    }\r\n\r\n    setRolePermissons = async () => {\r\n\r\n        this.setState({\r\n            isShownAuth: false\r\n        });\r\n\r\n        const role = this.state.role;\r\n        const menus = this.auth.current.getMenus();\r\n        role.menus = menus;\r\n        role.auth_time = Date.now();\r\n        role.auth_name = memoryUtils.user.username;\r\n\r\n        const result = await reqSetRolePermissions(role);\r\n        if (result.data.status===0) {\r\n            \r\n            //this.getRoles();\r\n            // If the permissions currently updated is one's own role's, then force quit\r\n            if (role._id===memoryUtils.user.role_id) {\r\n                memoryUtils.user = {};\r\n                storageUtils.removeUser();\r\n                this.props.history.replace('/login');\r\n                message.info('The permissions of current user has changed. Please login again.');\r\n            } else {\r\n                message.success('Successfully set the role permissions!');\r\n                this.setState({\r\n                    role: [...this.state.roles]\r\n                });\r\n            }\r\n        } else {\r\n            message.error('Failed to set the role permissions.');\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.initColumn();\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getRoles();\r\n    }\r\n\r\n    render () {\r\n\r\n        const {roles, role, isShownAdd, isShownAuth, loading} = this.state;\r\n\r\n        const title = (\r\n            <span>\r\n                <Button type='primary' onClick={() => this.setState({isShownAdd: true})}>Create Role</Button> &nbsp;&nbsp;\r\n                <Button type='primary' disabled={!role._id} onClick={() => this.setState({isShownAuth: true})}>Set Role Permissons</Button>&nbsp;&nbsp;\r\n                <Popconfirm\r\n                        title=\"Are you sure to delete this role?\"\r\n                        onConfirm={async() => {\r\n                            const result = await reqDeleteRole(role);\r\n                            if (result.data.status===0) {\r\n                                message.success('Successfully deleted the role!');\r\n                            } else {\r\n                                message.error('Failed to delete the role.');\r\n                            }\r\n                            this.getRoles();\r\n                        }}\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                    >\r\n                        <Button type='danger' disabled={!role._id}>\r\n                            Delete\r\n                        </Button>\r\n                    </Popconfirm>\r\n                \r\n            </span>\r\n        );\r\n\r\n        return (\r\n            <Card title={title}>\r\n                <Table\r\n                    columns={this.columns}\r\n                    rowKey='_id'\r\n                    bordered\r\n                    pagination={{\r\n                        defaultPageSize: PAGE_SIZE, \r\n                        showQuickJumper: true, \r\n                    }}\r\n                    dataSource={roles}\r\n                    rowSelection={{\r\n                        type: 'radio', \r\n                        selectedRowKeys: [role._id],\r\n                        onSelect: (role) => {\r\n                            this.setState({\r\n                                role\r\n                            });\r\n                        }\r\n                    }}\r\n                    onRow={this.onRow}\r\n                    loading={loading}\r\n                >\r\n                </Table>\r\n\r\n                <Modal\r\n                    title='Add New Role'\r\n                    visible={isShownAdd}\r\n                    onOk={this.addRole}\r\n                    onCancel={() => {\r\n                        this.setState({\r\n                            isShownAdd: false\r\n                        });\r\n                        this.form.current.resetFields();\r\n                    }}\r\n                >\r\n                    <AddForm\r\n                        setForm={(form) => this.form = form}\r\n                    />\r\n                </Modal>      \r\n\r\n                <Modal\r\n                    title='Set Role Permissions'\r\n                    visible={isShownAuth}\r\n                    onOk={this.setRolePermissons}\r\n                    onCancel={() => {\r\n                        this.setState({\r\n                            isShownAuth: false\r\n                        });\r\n                    }}\r\n                >\r\n                    <AuthForm\r\n                        role={role}\r\n                        ref={this.auth}\r\n                    />\r\n                </Modal>  \r\n\r\n            </Card>\r\n        );\r\n    }\r\n}","import React, {PureComponent} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Select } from 'antd';\r\n\r\nconst {Item} = Form;\r\nconst Option = Select.Option;\r\n\r\nexport default class UserForm extends PureComponent {\r\n\r\n    formRef = React.createRef();\r\n\r\n    static propTypes = {\r\n        setForm: PropTypes.func.isRequired,\r\n        roles: PropTypes.array.isRequired,\r\n        user: PropTypes.object,\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.props.setForm(this.formRef);\r\n    }\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n        labelCol: { span: 4 },  \r\n        wrapperCol: { span: 15 }, \r\n        }\r\n\r\n        const {roles, user} = this.props;\r\n\r\n        return (\r\n            <Form ref={this.formRef} {...formItemLayout} >\r\n                <Item \r\n                    label='Username' \r\n                    name='username'\r\n                    initialValue={user.username} \r\n                    rules={[{\r\n                        required: true, \r\n                        message: 'Username must be entered!'\r\n                    }]}\r\n                >\r\n                    <Input placeholder='Please input the username.' />\r\n                </Item>\r\n                {\r\n                    user._id ? null : (\r\n                        <Item \r\n                            label='Password' \r\n                            name='password'\r\n                            initialValue={user.password} \r\n                            rules={[{\r\n                                required: true, \r\n                                message: 'Password must be entered!'\r\n                            }]}\r\n                        >\r\n                            <Input type='password' placeholder='Please input the password.' />\r\n                        </Item>\r\n                    )\r\n                }\r\n                <Item \r\n                    label='Role' \r\n                    name='role_id'\r\n                    initialValue={user.role_id}\r\n                >\r\n                    <Select>\r\n                        {\r\n                            roles.map(role => <Option key={role._id}>{role.name}</Option>)\r\n                        }\r\n                    </Select>\r\n                </Item>\r\n                <Item \r\n                    label='Notes' \r\n                    name='notes'\r\n                    initialValue={user.notes}\r\n                >\r\n                    <Input placeholder='Please input the notes.' />\r\n                </Item>\r\n            </Form>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Card, Button, Table, Modal, message } from 'antd';\r\nimport {PAGE_SIZE} from '../../utils/constants';\r\nimport {formatDate} from '../../utils/dateUtils';\r\nimport { reqAddOrUpdateUser, reqDeleteUser, reqUsers } from '../../api';\r\nimport UserForm from './user-form';\r\n\r\nexport default class UserManagement extends Component {\r\n\r\n    state = {\r\n        users: [], // List of all users\r\n        roles: [], // List of all roles\r\n        isShown: false, // Display the interface or not\r\n        loading: false\r\n    }\r\n\r\n    initColumns = () => {\r\n        this.columns = [\r\n            {\r\n                title: 'Username',\r\n                dataIndex: 'username'\r\n            },\r\n            {\r\n                title: 'Register Time',\r\n                dataIndex: 'create_time',\r\n                render: formatDate\r\n            },\r\n            {\r\n                title: 'Role',\r\n                dataIndex: 'role_id',\r\n                render: (role_id) => this.roleNames[role_id]\r\n            },\r\n            {\r\n                title: 'Notes',\r\n                dataIndex: 'notes'\r\n            },\r\n            {\r\n                title: 'Action',\r\n                render: (user) => (\r\n                    <span>\r\n                        <Button \r\n                        type='link' \r\n                        onClick={() => {\r\n                            this.user = user;\r\n                            this.setState({\r\n                                isShown: true\r\n                            });\r\n                        }}\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                        <Button \r\n                            type='link' \r\n                            style={{color: \"red\"}}\r\n                            onClick={() => this.deleteUser(user)}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </span>\r\n                )\r\n            }\r\n        ];\r\n    }\r\n\r\n    // Generate the object including all the roles according to the array 'role' (use value of role's id as attribute name)\r\n    initRoleNames = (roles) => {\r\n        const roleNames = roles.reduce((pre, role) => {\r\n            pre[role._id] = role.name;\r\n            return pre;\r\n        }, {});\r\n        this.roleNames = roleNames;\r\n    }\r\n\r\n    addOrUpdateUser = async () => {\r\n\r\n        this.setState({isShown: false});\r\n\r\n        // Collect input data\r\n        const user = this.form.current.getFieldsValue();\r\n        this.form.current.resetFields();\r\n\r\n        // If it is update, declare the _id for user\r\n        if (this.user) {\r\n            user._id = this.user._id;\r\n        }\r\n\r\n        // Commit the add request\r\n        const result = await reqAddOrUpdateUser(user);\r\n        if (result.data.status===0) {\r\n            message.success(`Successfully ${this.user ? 'updated' : 'added'} the user!`);\r\n            this.getUsers();\r\n        } else {\r\n            message.error('Failed to add the user.');\r\n        }\r\n\r\n        // Update the list\r\n    }\r\n\r\n    getUsers = async () => {\r\n        this.setState({loading: true});\r\n        const result = await reqUsers();\r\n        this.setState({loading: false});\r\n        if (result.data.status===0) {\r\n            const {users, roles} = result.data.data;\r\n            this.initRoleNames(roles);\r\n            this.setState({\r\n                users,\r\n                roles\r\n            });\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    deleteUser = (user) => {\r\n        Modal.confirm({\r\n            title: `Are you sure to delete ${user.username}?`,\r\n            onOk: async () => {\r\n                const result = await reqDeleteUser(user._id);\r\n                if (result.data.status===0) {\r\n                    message.success(\"Successfully deleted the user!\");\r\n                    this.getUsers();\r\n                } else {\r\n                    message.error(\"Failed to delete the user\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    UNSAFE_componentWillMount () {\r\n        this.initColumns();\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getUsers();\r\n    }\r\n\r\n    render () {\r\n\r\n        const {users, roles, isShown, loading} = this.state;\r\n        const user = this.user || {};\r\n\r\n        const title = <Button type='primary' onClick={() => {\r\n            this.user = null;\r\n            this.setState({isShown: true});\r\n        }}>Create User</Button>;\r\n\r\n        return (\r\n            <Card title={title}>\r\n                <Table\r\n                    columns={this.columns}\r\n                    rowKey='_id'\r\n                    bordered\r\n                    pagination={{\r\n                        defaultPageSize: PAGE_SIZE, \r\n                        showQuickJumper: true, \r\n                    }}\r\n                    dataSource={users}\r\n                    loading={loading}\r\n                >\r\n                </Table>\r\n\r\n                <Modal\r\n                    title={user._id ? 'Update User' : 'Create User'}\r\n                    visible={isShown}\r\n                    onOk={this.addOrUpdateUser}\r\n                    onCancel={() => {\r\n                        this.form.current.resetFields();\r\n                        this.setState({isShown: false});\r\n                        this.user = null;\r\n                    }}\r\n                    destroyOnClose\r\n                >\r\n                    <UserForm \r\n                        setForm={form => this.form = form}\r\n                        roles={roles}\r\n                        user={user}\r\n                    />\r\n                </Modal>      \r\n            </Card>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport memoryUtils from '../../utils/memoryUtils';\r\nimport { Layout } from 'antd';\r\nimport LeftNav from '../../components/left-nav';\r\nimport Header from '../../components/header';\r\nimport Home from '../home/home';\r\nimport Calendar from '../calendar/calendar';\r\nimport Member from '../member/member';\r\nimport MemberManagement from '../memberManagement/memberManagement';\r\nimport RoleManagement from '../roleManagement/roleManagement';\r\nimport UserManagement from '../userManagement/userManagement';\r\n\r\n\r\nconst { Footer, Sider, Content } = Layout;\r\n\r\nexport default class Admin extends Component {\r\n    render () {\r\n\r\n        const user = memoryUtils.user;\r\n        // No user is stored in memory, which means not logged in\r\n        if (!user || !user._id) {\r\n            // Automatically jump to the login screen\r\n            return <Redirect to='/login'/>\r\n        }\r\n\r\n        return (\r\n            <Layout style={{minHeight:'100%'}}>\r\n                <Sider style={{zIndex: 9999}}>\r\n                    <LeftNav/>\r\n                </Sider>\r\n                <Layout style={{minWidth: 1000}}>\r\n                    <Header>Header</Header>\r\n                    <Content style={{margin: 20, backgroundColor: '#ffffff'}}>\r\n                        <Switch>\r\n                            <Route path='/home' component={Home}/>\r\n                            <Route path='/calendar' component={Calendar}/>\r\n                            <Route path='/member' component={Member}/>\r\n                            <Route path='/management/member' component={MemberManagement}/>\r\n                            <Route path='/management/user' component={UserManagement}/>\r\n                            <Route path='/management/role' component={RoleManagement}/>\r\n                            <Redirect to='/home'/>\r\n                        </Switch>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Royal Never Give Up</Footer>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n//import { Button, message } from \"antd\";\r\nimport './App.less';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Login from './pages/login/login';\r\nimport Admin from './pages/admin/admin';\r\n\r\nexport default class App extends Component{\r\n\r\n  render () {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path='/login' component={Login}></Route>\r\n          <Route path='/' component={Admin}></Route> \r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport memoryUtils from '../src/utils/memoryUtils';\r\nimport storageUtils from '../src/utils/storageUtils';\r\n\r\n// Read the user saved in local and save it to memory\r\nconst user = storageUtils.getUser();\r\nmemoryUtils.user = user;\r\n\r\n// Render the component tag to the div on the index page\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}